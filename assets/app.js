var app=angular.module("app",["ngRoute","ui.router","ngCookies"]);angular.module("app").factory("authInterceptor",["$window",function(o){return{request:function(e){return e.headers=e.headers||{},o.localStorage.token&&(e.headers.Authorization=o.localStorage.token),e}}}]).config(["$stateProvider","$urlRouterProvider",function(o,e){o.state("home",{url:"/main",controller:"roomCtrl",templateUrl:"main"}).state("offer",{url:"/offer",controller:"offerCtrl",templateUrl:"offer"}).state("confirmation",{url:"/confirmation",templateUrl:"confirmation"}).state("successfulBooking",{url:"/successfulBooking",templateUrl:"successfulBooking"}).state("successfulSignup",{url:"/successfulSignup",templateUrl:"successfulSignup"}).state("account",{url:"/account",templateUrl:"account"}).state("signin",{url:"/signin",templateUrl:"signin"}).state("signup",{url:"/signup",templateUrl:"signup"}).state("account.bookings",{url:"/bookings",templateUrl:"bookings"}).state("account.details",{url:"/details",templateUrl:"details"}).state("account.changePassword",{url:"/changePassword",templateUrl:"changePassword"}),e.otherwise("/main")}]).run(["$rootScope","$state","$stateParams",function(o,e,t){o.$state=e,o.$stateParams=t}]),angular.module("app").controller("accCtrl",["$scope","$state","AuthService","roomService",function(o,e,t,n){o.regex="(\\+[0-9]\\d{1})*(\\s)*([0-9]\\d{2})(\\s*)([0-9]\\d{2})(\\s*)([0-9]\\d{2})",o.changeUserDetails=function(o,n,r,a,s){if(o){var i={firstName:n,lastName:r,email:a,phoneNumber:s};t.changeUserDetails(i).then(function(o){e.reload()})}},o.cancelBooking=function(o,t){console.log("room id to:"+o+", booking_id to:"+t),n.cancelBooking(o,t).then(function(o){console.log("udało się anulować"),e.reload()})};var r=function(){t.getUserBookings().then(function(e){console.log(e),o.userBookings=e})},a=function(){t.getUserInfo().then(function(e){console.log(e),o.firstName=e.firstName,o.lastName=e.lastName,o.email=e.email,o.phone=e.phone})};o.checkDate=function(o){var e=new Date,t=new Date(o);return t>e},a(),r()}]),angular.module("app").controller("authCtrl",["$q","$scope","$state","$window","$location","$route","$rootScope","AuthService",function(o,e,t,n,r,a,s,i){e.regex="(\\+[0-9]\\d{1})*(\\s)*([0-9]\\d{2})(\\s*)([0-9]\\d{2})(\\s*)([0-9]\\d{2})",e.submitError=!1,e.errorMessage="",s.isLoggedIn=function(){return i.isAuthenticated},e.signin=function(){console.log("login"),i.signin(e.user).then(function(o,e){s.isLogedIn=!0,n.location.reload(),console.log(o)})},e.signout=function(){i.signout(),s.isLogedIn=!1,t.go("home").then(function(){n.location.reload()}),console.log("logout")},e.getUserInfo=function(){i.getUserInfo().then(function(o){console.log(o),e.userinfo=o})},e.submitForm=function(o){o?i.signup(e.user).then(function(o){console.log("Pomyślnie zarejestrowano"),e.submitError=!1,i.signin(e.user).then(function(o,e){s.isLogedIn=!0,"http://localhost:3001/#/confirmation"==n.location.toString()?n.location.reload():n.location.href="#/successfulSignup"})},function(o){switch(console.log(o),o.code){case 11e3:e.submitError=!0,e.errorMessage="Wybrany email jest już zarejestrowany. Proszę wybrać inny.";break;default:e.submitError=!0,e.errorMessage="Upss coś poszło nie tak. Proszę spróbować później."}}):(e.submitError=!0,e.errorMessage="Upss coś poszło nie tak. Proszę spróbować później.")},e.$watch("submitError",function(o){console.log(o)})}]),angular.module("app").controller("confirmationCtrl",["$q","$window","$location","$state","$cookies","$scope","$rootScope","AuthService","roomService",function(o,e,t,n,r,a,s,i,c){a.isSignedIn=!1,a.room=JSON.parse(r.get("room")),a.dateFrom=JSON.parse(r.get("dates")).dateFrom,a.dateTo=JSON.parse(r.get("dates")).dateTo,a.extras=JSON.parse(r.get("extras")).extras,a.numOfDays=JSON.parse(r.get("extras")).numOfDays;var u=function(){i.isAuthenticated?a.isSignedIn=!0:a.isSignedIn=!1};a.reserve=function(){1!=a.terms?alert("Przed potwierdzeniem rezerwacji należy zaakceptowaćregulamin."):c.bookRoom({id:a.room._id,from:a.dateFrom,to:a.dateTo,price:l(),extras:a.extras}).then(function(){n.go("successfulBooking")},function(o){})},a.toPrevious=function(){n.go("offer")};var l=function(){var o=0;return o=a.room.price*a.numOfDays,a.extras.forEach(function(e){o+=e.price*a.numOfDays}),o};u()}]),angular.module("app").directive("compareTo",function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(o,e,t,n){n.$validators.compareTo=function(e){return e==o.otherModelValue},o.$watch("otherModelValue",function(){n.$validate()})}}}).directive("userInfo",function(){return{template:"<p>sialala</p>"}}),angular.module("app").controller("offerCtrl",["$scope","$cookies","$state","$location","$window","offerSvc",function(o,e,t,n,r,a){o.offer={},o.extras=[],o.selectedExtras=[];var s={};o.dateFrom="",o.dateTo="",o.roomName="";var i=function(){o.offer=JSON.parse(e.get("room")),o.extras=u(),s=JSON.parse(e.get("dates")),o.dateFrom=c(new Date(s.dateFrom)),o.dateTo=c(new Date(s.dateTo)),o.roomName=o.offer.type,o.roomPrice=o.offer.price*l(),o.extrasTotalPrice=0},c=function(o){var e=o.getUTCDate(),t=o.getUTCMonth()+1,n=o.getUTCFullYear();return""+e+"-"+t+"-"+n};o.addOrRemoveExtra=function(e){var t=o.selectedExtras.indexOf(e);e.buttonText=e.buttonToggle?"Dodaj +":"Usuń -",e.buttonToggle=!e.buttonToggle,t==-1?(o.selectedExtras.push(e),o.extrasTotalPrice+=e.price*l()):(o.selectedExtras.splice(t,1),o.extrasTotalPrice-=e.price*l())},o.toConfirmation=function(){console.log("asdasd");var n={extras:o.selectedExtras,numOfDays:l()};e.put("extras",JSON.stringify(n)),t.go("confirmation")},o.toPrevious=function(){t.go("home")};var u=function(){a.getExtras().then(function(e){o.extras=e;for(var t=0;t<o.extras.length;t++)o.extras[t].buttonText="Dodaj +",o.extras[t].buttonToggle=!1})},l=function(){var o=864e5,e=new Date(s.dateFrom),t=new Date(s.dateTo),n=Date.UTC(e.getFullYear(),e.getMonth(),e.getDate()),r=Date.UTC(t.getFullYear(),t.getMonth(),t.getDate());return Math.floor((r-n)/o)};i()}]),angular.module("app").controller("roomCtrl",["$q","$cookies","$scope","$window","$location","roomService","offerSvc","$filter","$state",function(o,e,t,n,r,a,s,i,c){t.dateFrom="",t.dateTo="",t.noRoomsError=!1,t.errorMsg="",t.rooms=[],t.numberOfBeds=1;var u=function(){var o=new Date;console.log(o),t.dateFrom=o;var e=new Date;e.setDate(e.getDate()+1),t.dateTo=e};t.init=function(){u(),t.findRooms()},t.findRooms=function(){a.getRooms({from:t.dateFrom.toISOString(),to:t.dateTo.toISOString(),beds:t.numberOfBeds}).then(function(o){t.rooms=o},function(o){t.noRoomsError=!0,t.errorMsg="Coś poszło nie tak."})},t.addRoom=function(o){e.put("room",JSON.stringify(o)),e.put("dates",JSON.stringify({dateFrom:t.dateFrom,dateTo:t.dateTo})),s.chooseRoom(o),c.go("offer")},t.test=function(){console.log(t.rooms),t.findRooms()}}]),angular.module("app").filter("uniqueCategories",function(){return function(o,e){if(angular.isArray(o)){for(var t=[],n={},r=0;r<o.length;r++){var a=o[r][e];angular.isUndefined(n[a])&&(n[a]=!0,t.push(o[r]))}return t}return o}}),angular.module("app").service("AuthService",["$http","$q",function(o,e){function t(){var o=window.localStorage.getItem(i);console.log("loading User info..."),o&&a(o)}function n(){s=void 0,c=!1,o.defaults.headers.common.Authorization=void 0,window.localStorage.removeItem(i)}function r(o){window.localStorage.setItem(i,o),a(o)}function a(e){c=!0,s=e,o.defaults.headers.common.Authorization=s}var s,i="token",c=!1,u=function(t){return e(function(e,n){o.post("/api/authenticate",t).then(function(o){o.data.success?(r(o.data.token),e(o.data.msg,o.data.success)):n(o.data.msg,o.data.success)})})},l=function(){n()},f=function(t){return e(function(e,n){o.post("/api/signup",t).then(function(o){o.data.success?(console.log("jestem w resolve"),e(o.data.msg)):n(o.data.msg)})})};t();var g=function(){return e(function(e,t){o.get("/api/userinfo").then(function(o){o.data.success?e({firstName:o.data.firstName,lastName:o.data.lastName,email:o.data.email,phone:o.data.phone}):t(o.data.msg)})})},d=function(){return e(function(e,t){o.get("/api/getUserBookings").then(function(o){e(o.data)})})},m=function(n){return e(function(e,a){o.post("/api/test",n).then(function(s){s.data.success?(console.log("hello"),o.post("/api/getNewToken",{email:n.email}).then(function(o){o.data.success?(console.log("result2 success"),r(o.data.token),t()):console.log("error nowego tokena")}),e({success:!0,msg:"Pomyślnie zmieniono dane"})):a({success:!1,msg:"coś poszło nie tak"})})})};return{signin:u,signout:l,signup:f,getUserInfo:g,getUserBookings:d,changeUserDetails:m,isAuthenticated:c}}]),angular.module("app").service("offerSvc",["$q","$http",function(o,e){var t=function(o){choosenRoom=o},n=function(){return choosenRoom},r=function(){return o(function(o,t){e.get("/api/getExtras").then(function(e){e.data.success?o(e.data.extras):t(e.data.error)})})};return{chooseRoom:t,getRoom:n,getExtras:r}}]),angular.module("app").service("roomService",["$q","$http",function(o,e){var t=function(t){return o(function(o,n){e.post("/api/findRooms",t).then(function(e){e.data.success?(console.log("Pobrano pokoje"),o(e.data.rooms)):n(e.data.error)})})},n=function(t){return o(function(o,n){e.post("/api/reserve",t).then(function(e){e.data.success?o(e.data.success):n(e.data.error)})})},r=function(t,n){return o(function(o,r){console.log("jetem przed post cancel"),e.post("/api/cancelBooking",{room_id:t,booking_id:n}).then(function(e){e.data.success?(console.log("resolve cancel"),o(e.data.success)):(console.log("reject cancel"),r(e.data.error))})})};return{getRooms:t,bookRoom:n,cancelBooking:r}}]);
//# sourceMappingURL=data:application/json;base64,
