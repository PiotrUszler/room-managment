var app=angular.module("app",["ngRoute","ui.router","ngCookies"]);angular.module("app").factory("authInterceptor",["$window",function(o){return{request:function(e){return e.headers=e.headers||{},o.localStorage.token&&(e.headers.Authorization=o.localStorage.token),e}}}]).config(["$stateProvider","$urlRouterProvider",function(o,e){o.state("home",{url:"/main",controller:"roomCtrl",templateUrl:"main"}).state("offer",{url:"/offer",controller:"offerCtrl",templateUrl:"offer"}).state("confirmation",{url:"/confirmation",templateUrl:"confirmation"}).state("successfulBooking",{url:"/successfulBooking",templateUrl:"successfulBooking"}).state("successfulSignup",{url:"/successfulSignup",templateUrl:"successfulSignup"}).state("account",{url:"/account",templateUrl:"account"}).state("signin",{url:"/signin",templateUrl:"signin"}).state("signup",{url:"/signup",templateUrl:"signup"}).state("account.bookings",{url:"/bookings",templateUrl:"bookings"}).state("account.details",{url:"/details",templateUrl:"details"}).state("account.changePassword",{url:"/changePassword",templateUrl:"changePassword"}).state("managment",{url:"/managment",templateUrl:"managment"}),e.otherwise("/main")}]).run(["$rootScope","$state","$stateParams",function(o,e,t){o.$state=e,o.$stateParams=t}]),angular.module("app").controller("accCtrl",["$scope","$state","AuthService","roomService",function(o,e,t,n){o.regex="(\\+[0-9]\\d{1})*(\\s)*([0-9]\\d{2})(\\s*)([0-9]\\d{2})(\\s*)([0-9]\\d{2})",o.changeUserDetails=function(o,n,a,r,s){if(o){var i={firstName:n,lastName:a,email:r,phoneNumber:s};t.changeUserDetails(i).then(function(o){e.reload()})}},o.cancelBooking=function(o,t){console.log("room id to:"+o+", booking_id to:"+t),n.cancelBooking(o,t).then(function(o){console.log("udało się anulować"),e.reload()})};var a=function(){t.getUserBookings().then(function(e){console.log(e),o.userBookings=e})},r=function(){t.getUserInfo().then(function(e){console.log(e),o.firstName=e.firstName,o.lastName=e.lastName,o.email=e.email,o.phone=e.phone})};o.changePassword=function(e,n,a){e&&t.changePassword(n,a).then(function(e){console.log(e.msg),o.successfulPasswordChange=!0},function(e){o.wrongPassword=!0})},o.checkDate=function(o){var e=new Date,t=new Date(o);return t>e},r(),a()}]),angular.module("app").controller("authCtrl",["$q","$scope","$state","$window","$location","$route","$rootScope","AuthService",function(o,e,t,n,a,r,s,i){e.regex="(\\+[0-9]\\d{1})*(\\s)*([0-9]\\d{2})(\\s*)([0-9]\\d{2})(\\s*)([0-9]\\d{2})",e.submitError=!1,e.errorMessage="",s.isLoggedIn=function(){return i.isAuthenticated},s.isLoggedIn()&&i.getUserRole().then(function(o){s.role=o.role}),e.signin=function(){console.log("login"),i.signin(e.user).then(function(o,e){s.isLogedIn=!0,i.getUserRole().then(function(o){s.role=o.role}),n.location.reload(),console.log(o)})},e.signout=function(){i.signout(),s.isLogedIn=!1,t.go("home").then(function(){n.location.reload()}),console.log("logout")},e.getUserInfo=function(){i.getUserInfo().then(function(o){console.log(o),e.userinfo=o})},e.submitForm=function(o){o?i.signup(e.user).then(function(o){console.log("Pomyślnie zarejestrowano"),e.submitError=!1,i.signin(e.user).then(function(o,e){s.isLogedIn=!0,"http://localhost:3001/#/confirmation"==n.location.toString()?n.location.reload():t.go("successfulSignup").then(function(){n.location.reload()})})},function(o){switch(console.log(o),o.code){case 11e3:e.submitError=!0,e.errorMessage="Wybrany email jest już zarejestrowany. Proszę wybrać inny.";break;default:e.submitError=!0,e.errorMessage="Upss coś poszło nie tak. Proszę spróbować później."}}):(e.submitError=!0,e.errorMessage="Upss coś poszło nie tak. Proszę spróbować później.")},e.$watch("submitError",function(o){console.log(o)})}]),angular.module("app").controller("confirmationCtrl",["$q","$window","$location","$state","$cookies","$scope","$rootScope","AuthService","roomService",function(o,e,t,n,a,r,s,i,c){r.isSignedIn=!1,r.room=JSON.parse(a.get("room")),r.dateFrom=JSON.parse(a.get("dates")).dateFrom,r.dateTo=JSON.parse(a.get("dates")).dateTo,r.extras=JSON.parse(a.get("extras")).extras,r.numOfDays=JSON.parse(a.get("extras")).numOfDays;var u=function(){i.isAuthenticated?r.isSignedIn=!0:r.isSignedIn=!1};r.reserve=function(){1!=r.terms?alert("Przed potwierdzeniem rezerwacji należy zaakceptowaćregulamin."):c.bookRoom({id:r.room._id,from:r.dateFrom,to:r.dateTo,price:l(),extras:r.extras}).then(function(){n.go("successfulBooking")},function(o){})},r.toPrevious=function(){n.go("offer")};var l=function(){var o=0;return o=r.room.price*r.numOfDays,r.extras.forEach(function(e){o+=e.price*r.numOfDays}),o};u()}]),angular.module("app").directive("compareTo",function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(o,e,t,n){n.$validators.compareTo=function(e){return e==o.otherModelValue},o.$watch("otherModelValue",function(){n.$validate()})}}}).directive("userInfo",function(){return{template:"<p>sialala</p>"}}),angular.module("app").controller("offerCtrl",["$scope","$cookies","$state","$location","$window","offerSvc",function(o,e,t,n,a,r){o.offer={},o.extras=[],o.selectedExtras=[];var s={};o.dateFrom="",o.dateTo="",o.roomName="";var i=function(){o.offer=JSON.parse(e.get("room")),o.extras=u(),s=JSON.parse(e.get("dates")),o.dateFrom=c(new Date(s.dateFrom)),o.dateTo=c(new Date(s.dateTo)),o.roomName=o.offer.type,o.roomPrice=o.offer.price*l(),o.extrasTotalPrice=0},c=function(o){var e=o.getUTCDate(),t=o.getUTCMonth()+1,n=o.getUTCFullYear();return""+e+"-"+t+"-"+n};o.addOrRemoveExtra=function(e){var t=o.selectedExtras.indexOf(e);e.buttonText=e.buttonToggle?"Dodaj +":"Usuń -",e.buttonToggle=!e.buttonToggle,t==-1?(o.selectedExtras.push(e),o.extrasTotalPrice+=e.price*l()):(o.selectedExtras.splice(t,1),o.extrasTotalPrice-=e.price*l())},o.toConfirmation=function(){console.log("asdasd");var n={extras:o.selectedExtras,numOfDays:l()};e.put("extras",JSON.stringify(n)),t.go("confirmation")},o.toPrevious=function(){t.go("home")};var u=function(){r.getExtras().then(function(e){o.extras=e;for(var t=0;t<o.extras.length;t++)o.extras[t].buttonText="Dodaj +",o.extras[t].buttonToggle=!1})},l=function(){var o=864e5,e=new Date(s.dateFrom),t=new Date(s.dateTo),n=Date.UTC(e.getFullYear(),e.getMonth(),e.getDate()),a=Date.UTC(t.getFullYear(),t.getMonth(),t.getDate());return Math.floor((a-n)/o)};i()}]),angular.module("app").controller("roomCtrl",["$q","$cookies","$scope","$window","$location","roomService","offerSvc","$filter","$state",function(o,e,t,n,a,r,s,i,c){t.dateFrom="",t.dateTo="",t.noRoomsError=!1,t.errorMsg="",t.rooms=[],t.numberOfBeds=1,t.select=function(o){t.selectedRoom=o};var u=function(){var o=new Date;console.log(o),t.dateFrom=o;var e=new Date;e.setDate(e.getDate()+1),t.dateTo=e};t.init=function(){u(),t.findRooms()},t.findRooms=function(){r.getRooms({from:t.dateFrom.toISOString(),to:t.dateTo.toISOString(),beds:t.numberOfBeds}).then(function(o){t.rooms=o},function(o){t.noRoomsError=!0,t.errorMsg="Coś poszło nie tak."})},t.addRoom=function(o){e.put("room",JSON.stringify(o)),e.put("dates",JSON.stringify({dateFrom:t.dateFrom,dateTo:t.dateTo})),s.chooseRoom(o),c.go("offer")},t.test=function(){console.log(t.rooms),t.findRooms()},t.getAllRooms=function(){r.getAllRooms().then(function(o){t.allRooms=o,console.log(o)},function(o){})},t.getAvailability=function(o){for(var e=new Date,t=0;t<o.length;t++){var n=new Date(o[t].from),a=new Date(o[t].to);if(e<a&&e>n)return"notAvailable"}return"available"}}]),angular.module("app").filter("uniqueCategories",function(){return function(o,e){if(angular.isArray(o)){for(var t=[],n={},a=0;a<o.length;a++){var r=o[a][e];angular.isUndefined(n[r])&&(n[r]=!0,t.push(o[a]))}return t}return o}}),angular.module("app").service("AuthService",["$http","$q",function(o,e,t){function n(){var o=window.localStorage.getItem(c);console.log("loading User info..."),o&&s(o)}function a(){i=void 0,u=!1,o.defaults.headers.common.Authorization=void 0,window.localStorage.removeItem(c)}function r(o){window.localStorage.setItem(c,o),s(o)}function s(e){u=!0,i=e,o.defaults.headers.common.Authorization=i}var i,c="token",u=!1,l=function(t){return e(function(e,n){o.post("/api/authenticate",t).then(function(o){o.data.success?(r(o.data.token),e(o.data.msg,o.data.success)):n(o.data.msg,o.data.success)})})},f=function(){a()},g=function(t){return e(function(e,n){o.post("/api/signup",t).then(function(o){o.data.success?(console.log("jestem w resolve"),e(o.data.msg)):n(o.data.msg)})})};n();var d=function(){return e(function(e,t){o.get("/api/userinfo").then(function(o){o.data.success?e({firstName:o.data.firstName,lastName:o.data.lastName,email:o.data.email,phone:o.data.phone,role:o.data.role}):t(o.data.msg)})})},m=function(){return e(function(e,t){o.get("/api/getUserBookings").then(function(o){e(o.data)})})},p=function(t){return e(function(e,a){o.post("/api/test",t).then(function(s){s.data.success?(console.log("hello"),o.post("/api/getNewToken",{email:t.email}).then(function(o){o.data.success?(console.log("result2 success"),r(o.data.token),n()):console.log("error nowego tokena")}),e({success:!0,msg:"Pomyślnie zmieniono dane"})):a({success:!1,msg:"coś poszło nie tak"})})})},h=function(t,n){return e(function(e,a){o.post("/api/change-password",{oldPass:t,newPass:n}).then(function(o){o.data.success?e({msg:"pomyślnie zmieniono haslo"}):a({msg:o.data.error})})})},v=function(){return e(function(e,t){o.get("/api/userinfo").then(function(o){o.data.success?e({role:o.data.role}):t(o.data.msg)})})};return{signin:l,signout:f,signup:g,getUserInfo:d,getUserBookings:m,changeUserDetails:p,changePassword:h,getUserRole:v,isAuthenticated:u}}]),angular.module("app").service("offerSvc",["$q","$http",function(o,e){var t=function(o){choosenRoom=o},n=function(){return choosenRoom},a=function(){return o(function(o,t){e.get("/api/getExtras").then(function(e){e.data.success?o(e.data.extras):t(e.data.error)})})};return{chooseRoom:t,getRoom:n,getExtras:a}}]),angular.module("app").service("roomService",["$q","$http",function(o,e){var t=function(t){return o(function(o,n){e.post("/api/findRooms",t).then(function(e){e.data.success?(console.log("Pobrano pokoje"),o(e.data.rooms)):n(e.data.error)})})},n=function(t){return o(function(o,n){e.post("/api/reserve",t).then(function(e){e.data.success?o(e.data.success):n(e.data.error)})})},a=function(t,n){return o(function(o,a){console.log("jetem przed post cancel"),e.post("/api/cancelBooking",{room_id:t,booking_id:n}).then(function(e){e.data.success?(console.log("resolve cancel"),o(e.data.success)):(console.log("reject cancel"),a(e.data.error))})})},r=function(){return o(function(o,t){e.get("/api/getRooms").then(function(e){e.data.success?o(e.data.result):t(e.data.error)})})};return{getRooms:t,getAllRooms:r,bookRoom:n,cancelBooking:a}}]);
//# sourceMappingURL=data:application/json;base64,
