var app=angular.module("app",["ngRoute","ui.router","ngCookies"]);angular.module("app").factory("authInterceptor",["$window",function(e){return{request:function(t){return t.headers=t.headers||{},e.localStorage.token&&(t.headers.Authorization=e.localStorage.token),t}}}]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("home",{url:"/main",controller:"roomCtrl",templateUrl:"main"}).state("rooms",{url:"/rooms",templateUrl:"rooms"}).state("restaurant",{url:"/restaurant",templateUrl:"restaurant"}).state("contact",{url:"/contact",templateUrl:"contact"}).state("offer",{url:"/offer",controller:"offerCtrl",templateUrl:"offer"}).state("confirmation",{url:"/confirmation",templateUrl:"confirmation"}).state("successfulBooking",{url:"/successfulBooking",templateUrl:"successfulBooking"}).state("successfulSignup",{url:"/successfulSignup",templateUrl:"successfulSignup"}).state("account",{url:"/account",templateUrl:"account"}).state("signin",{url:"/signin",templateUrl:"signin"}).state("signup",{url:"/signup",templateUrl:"signup"}).state("account.bookings",{url:"/bookings",templateUrl:"bookings"}).state("account.details",{url:"/details",templateUrl:"details"}).state("account.changePassword",{url:"/changePassword",templateUrl:"changePassword"}).state("managment",{url:"/managment",templateUrl:"managment"}).state("managment.rooms",{url:"/managment-rooms",templateUrl:"managment-rooms"}).state("managment.users",{url:"/managment-users",templateUrl:"managment-users"}).state("managment.vouchers",{url:"/managment-vouchers",templateUrl:"managment-vouchers"}).state("managment-bookings",{url:"/managment-bookings",templateUrl:"/managment-bookings"}).state("test",{url:"/test",templateUrl:"test"}),t.otherwise("/main")}]).run(["$rootScope","$state","$stateParams",function(e,t,o){e.$state=t,e.$stateParams=o}]),angular.module("app").controller("accCtrl",["$scope","$state","AuthService","roomService",function(e,t,o,n){e.regex="(\\+[0-9]\\d{1})*(\\s)*([0-9]\\d{2})(\\s*)([0-9]\\d{2})(\\s*)([0-9]\\d{2})",e.isActive=function(e){return e===$location.path()},e.changeUserDetails=function(e,n,a,r,s){if(e){var c={firstName:n,lastName:a,email:r,phoneNumber:s};o.changeUserDetails(c).then(function(e){t.reload()})}},e.cancelBooking=function(e,o){console.log("room id to:"+e+", booking_id to:"+o),n.cancelBooking(e,o).then(function(e){console.log("udało się anulować"),t.reload()})};var a=function(){o.getUserBookings().then(function(t){console.log(t),e.userBookings=t})},r=function(){o.getUserInfo().then(function(t){console.log(t),e.firstName=t.firstName,e.lastName=t.lastName,e.email=t.email,e.phone=t.phone})};e.changePassword=function(t,n,a){t&&o.changePassword(n,a).then(function(t){console.log(t.msg),e.successfulPasswordChange=!0},function(t){e.wrongPassword=!0})},e.checkDate=function(e){var t=new Date,o=new Date(e);return o>t},r(),a()}]),angular.module("app").controller("authCtrl",["$q","$scope","$state","$window","$location","$route","$rootScope","AuthService",function(e,t,o,n,a,r,s,c){t.regex="(\\+[0-9]\\d{1})*(\\s)*([0-9]\\d{2})(\\s*)([0-9]\\d{2})(\\s*)([0-9]\\d{2})",t.submitError=!1,t.errorMessage="",s.isLoggedIn=function(){return c.isAuthenticated},s.isLoggedIn()&&c.getUserRole().then(function(e){s.role=e.role}),t.signin=function(){console.log("login"),c.signin(t.user).then(function(e,t){s.isLogedIn=!0,c.getUserRole().then(function(e){s.role=e.role}),n.location.reload(),console.log(e)})},t.signout=function(){c.signout(),s.isLogedIn=!1,o.go("home").then(function(){n.location.reload()}),console.log("logout")},t.getUserInfo=function(){c.getUserInfo().then(function(e){console.log(e),t.userinfo=e})},t.submitForm=function(e){e?c.signup(t.user).then(function(e){console.log("Pomyślnie zarejestrowano"),t.submitError=!1,c.signin(t.user).then(function(e,t){s.isLogedIn=!0,"http://localhost:3001/#/confirmation"==n.location.toString()?n.location.reload():o.go("successfulSignup").then(function(){n.location.reload()})})},function(e){switch(console.log(e),e.code){case 11e3:t.submitError=!0,t.errorMessage="Wybrany email jest już zarejestrowany. Proszę wybrać inny.";break;default:t.submitError=!0,t.errorMessage="Upss coś poszło nie tak. Proszę spróbować później."}}):(t.submitError=!0,t.errorMessage="Upss coś poszło nie tak. Proszę spróbować później.")},t.$watch("submitError",function(e){console.log(e)})}]),angular.module("app").controller("confirmationCtrl",["$q","$window","$location","$state","$cookies","$scope","$rootScope","AuthService","roomService","voucherService",function(e,t,o,n,a,r,s,c,i,u){r.isSignedIn=!1,r.room=JSON.parse(a.get("room")),r.dateFrom=JSON.parse(a.get("dates")).dateFrom,r.dateTo=JSON.parse(a.get("dates")).dateTo,r.extras=JSON.parse(a.get("extras")).extras,r.numOfDays=JSON.parse(a.get("extras")).numOfDays,r.price=JSON.parse(a.get("price"));var l=function(){c.isAuthenticated?r.isSignedIn=!0:r.isSignedIn=!1};r.reserve=function(){1!=r.terms?alert("Przed potwierdzeniem rezerwacji należy zaakceptowaćregulamin."):i.bookRoom({id:r.room._id,from:r.dateFrom,to:r.dateTo,price:d(),extras:r.extras}).then(function(){s.discount&&u.useVoucher(s.discount.code).then(function(e){n.go("successfulBooking")},function(e){console.log(e)})},function(e){})},r.toPrevious=function(){n.go("offer")};var d=function(){var e=0;return e=r.room.price*r.numOfDays,r.extras.forEach(function(t){e+=t.price*r.numOfDays}),e};l()}]),angular.module("app").directive("compareTo",function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,t,o,n){n.$validators.compareTo=function(t){return t==e.otherModelValue},e.$watch("otherModelValue",function(){n.$validate()})}}}).directive("userInfo",function(){return{template:"<p>sialala</p>"}}).directive("vouchercheck",["voucherService",function(e){return{require:"ngModel",link:function(e,t,o,n){function a(e){return 23==e.length&&"-"==e.charAt(5)&&e.charAt(11)&&e.charAt(17)?n.$setValidity("validVoucher",!0):n.$setValidity("validVoucher",!1),e}n.$parsers.push(a)}}}]),angular.module("app").controller("offerCtrl",["$scope","$rootScope","$cookies","$state","$location","$window","offerSvc",function(e,t,o,n,a,r,s){e.offer={},e.extras=[],e.selectedExtras=[];var c={};e.dateFrom="",e.dateTo="",e.roomName="";var i=function(){e.offer=JSON.parse(o.get("room")),e.extras=l(),c=JSON.parse(o.get("dates")),e.dateFrom=u(new Date(c.dateFrom)),e.dateTo=u(new Date(c.dateTo)),e.roomName=e.offer.room.type,e.roomPrice=e.offer.room.price*d(),e.extrasTotalPrice=0,e.calculateTotalPrice()},u=function(e){var t=e.getUTCDate(),o=e.getUTCMonth()+1,n=e.getUTCFullYear();return""+t+"-"+o+"-"+n};e.addOrRemoveExtra=function(t){var o=e.selectedExtras.indexOf(t);t.buttonText=t.buttonToggle?"Dodaj +":"Usuń -",t.buttonToggle=!t.buttonToggle,o==-1?(e.selectedExtras.push(t),e.extrasTotalPrice+=t.price*d()):(e.selectedExtras.splice(o,1),e.extrasTotalPrice-=t.price*d()),e.calculateTotalPrice()},e.toConfirmation=function(){console.log("asdasd");var t={extras:e.selectedExtras,numOfDays:d()};o.put("extras",JSON.stringify(t)),o.put("price",JSON.stringify(e.totalPrice)),n.go("confirmation")},e.toPrevious=function(){n.go("home")},e.calculateTotalPrice=function(){void 0!=t.discount&&"zl"==t.discount.type?e.totalPrice=d()*e.offer.room.price+e.extrasTotalPrice-t.discount.amount:void 0!=t.discount&&"%"==t.discount.type?(e.totalPrice=d()*e.offer.room.price+e.extrasTotalPrice,e.totalPrice=e.totalPrice-e.totalPrice*(t.discount.amount/100)):(e.totalPrice=d()*e.offer.room.price+e.extrasTotalPrice,console.log(e.extrasTotalPrice))};var l=function(){s.getExtras().then(function(t){e.extras=t;for(var o=0;o<e.extras.length;o++)e.extras[o].buttonText="Dodaj +",e.extras[o].buttonToggle=!1})};e.addOrRemoveExtra=function(t){var o=e.selectedExtras.indexOf(t);t.buttonText=t.buttonToggle?"Dodaj +":"Usuń -",t.buttonToggle=!t.buttonToggle,e.totalPrice=0,o==-1?(e.selectedExtras.push(t),e.extrasTotalPrice+=t.price*d()):(e.selectedExtras.splice(o,1),e.extrasTotalPrice-=t.price*d()),e.calculateTotalPrice()};var d=function(){var e=864e5,t=new Date(c.dateFrom),o=new Date(c.dateTo),n=Date.UTC(t.getFullYear(),t.getMonth(),t.getDate()),a=Date.UTC(o.getFullYear(),o.getMonth(),o.getDate());return Math.floor((a-n)/e)};t.$watch("discount",function(){e.calculateTotalPrice()}),i()}]),angular.module("app").controller("roomCtrl",["$q","$cookies","$scope","$rootScope","$window","$location","roomService","voucherService","offerSvc","$filter","$state",function(e,t,o,n,a,r,s,c,i,u,l){o.dateFrom="",o.dateTo="",o.noRoomsError=!1,o.errorMsg="",o.rooms=[],o.numberOfBeds=1,o.successfulCancel=!1,o.totalPrice=0,o.extras=[],o.selectedExtras=[],o.extrasTotalPrice=0,o.selectOrAddUser=void 0,o.select=function(e){o.selectedRoom=e};var d=function(){var e=new Date;o.dateFrom=e;var t=new Date;t.setDate(t.getDate()+1),o.dateTo=t};o.init=function(){d(),o.findRooms()},o.findRooms=function(){if(o.dateFrom.getMonth()>=o.dateTo.getMonth()&&o.dateFrom.getDate()>=o.dateTo.getDate()){var e=new Date;e.setDate(o.dateFrom.getDate()+1),e.setMonth(o.dateFrom.getMonth()),o.dateTo=e}s.getRooms({from:o.dateFrom.toISOString(),to:o.dateTo.toISOString(),beds:o.numberOfBeds}).then(function(e){e.length>0?(o.rooms=e,o.noRoomsError=!1):o.noRoomsError=!0},function(e){o.noRoomsError=!0,o.errorMsg="Coś poszło nie tak."})},o.addRoom=function(e){t.put("room",JSON.stringify({room:{id:e._id,type:e.type,price:e.price}})),t.put("dates",JSON.stringify({dateFrom:o.dateFrom,dateTo:o.dateTo})),i.chooseRoom(e),l.go("offer")},o.test=function(){console.log(o.rooms),o.findRooms()},o.getAllRooms=function(){s.getAllRooms().then(function(e){o.allRooms=e,console.log(e)},function(e){})},o.dateChanged=function(){if(o.dateFrom.getMonth()>=o.dateTo.getMonth()&&o.dateFrom.getDate()>=o.dateTo.getDate()){var e=new Date;e.setDate(o.dateFrom.getDate()+1),e.setMonth(o.dateFrom.getMonth()),o.dateTo=e}},o.getAvailability=function(e){for(var t=(new Date,new Date(o.dateFrom)),n=new Date(o.dateTo),a=0;a<e.length;a++){var r=new Date(e[a].from),s=new Date(e[a].to);if(t<s&&n>r)return"notAvailable"}return"available"},o.managmentInit=function(){d(),o.getAllRooms()},o.toBookings=function(e){t.put("selectedRoom",JSON.stringify({_id:e._id,type:e.type,number:e.number,beds:e.beds,price:e.price})),$("#regulamin").modal("hide"),setTimeout(function(){l.go("managment-bookings")},500)},o.getSelectedRoom=function(){o.selectedRoom=JSON.parse(t.get("selectedRoom"))},o.checkDate=function(e){var t=new Date,o=new Date(e);return o>t},o.cancelBooking=function(e,t){console.log("room id to:"+e+", booking_id to:"+t),s.cancelBooking(e,t).then(function(e){console.log("udało się anulować"),l.reload()})},o.getRoomBookings=function(){o.getSelectedRoom(),s.getRoomBookings(o.selectedRoom._id).then(function(e){o.bookings=e.reservations})},o.selectUser=function(e){s.getUserInfo(e).then(function(e){o.selectedUser=e,console.log(o.selectedUser)})},o.toBooking=function(e,o,n){t.put("booking",JSON.stringify({room:{_id:e._id,type:e.type,number:e.number,beds:e.beds,price:e.price},dateFrom:o,dateTo:n})),$("#regulamin").modal("hide"),setTimeout(function(){l.go("test")},500)},o.initBooking=function(){o.booking=JSON.parse(t.get("booking")),o.test.dateFrom=new Date(o.booking.dateFrom),o.test.dateTo=new Date(o.booking.dateTo),o.calculateTotalPrice(),f(),s.getUsersEmails().then(function(e){o.users=JSON.parse(JSON.stringify(e))})},o.submitBookForm=function(){var e=null;if(o.selectOrAddUser){if(void 0==o.test.email)var e={email:""+o.test.firstName+o.test.lastName+o.test.phone,firstName:o.test.firstName,lastName:o.test.lastName,phone:o.test.phone};else var e={email:o.test.email,firstName:o.test.firstName,lastName:o.test.lastName,phone:o.test.phone};s.signupAndBook(e,o.booking.room._id,{dateFrom:o.test.dateFrom,dateTo:o.test.dateTo},o.totalPrice,o.selectedExtras).then(function(e){n.discount&&c.useVoucher(n.discount.code).then(function(e){},function(e){console.log(e)})})}else e=JSON.parse(o.selectedUserBooking),s.adminBook(o.booking.room._id,e.email,{dateFrom:o.test.dateFrom,dateTo:o.test.dateTo},o.totalPrice,o.selectedExtras).then(function(e){n.discount&&c.useVoucher(n.discount.code).then(function(e){},function(e){console.log(e)})})};var g=function(){var e=864e5,t=new Date(o.test.dateFrom),n=new Date(o.test.dateTo),a=Date.UTC(t.getFullYear(),t.getMonth(),t.getDate()),r=Date.UTC(n.getFullYear(),n.getMonth(),n.getDate());return Math.floor((r-a)/e)};o.calculateTotalPrice=function(){o.booking&&(void 0!=n.discount&&"zl"==n.discount.type?o.totalPrice=g()*o.booking.room.price+o.extrasTotalPrice-n.discount.amount:void 0!=n.discount&&"%"==n.discount.type?(o.totalPrice=g()*o.booking.room.price+o.extrasTotalPrice,o.totalPrice=o.totalPrice-o.totalPrice*(n.discount.amount/100)):(o.totalPrice=g()*o.booking.room.price+o.extrasTotalPrice,console.log(o.extrasTotalPrice)))};var f=function(){i.getExtras().then(function(e){o.extras=e;for(var t=0;t<o.extras.length;t++)o.extras[t].buttonText="Dodaj +",o.extras[t].buttonToggle=!1})};o.addOrRemoveExtra=function(e){var t=o.selectedExtras.indexOf(e);e.buttonText=e.buttonToggle?"Dodaj +":"Usuń -",e.buttonToggle=!e.buttonToggle,o.totalPrice=0,t==-1?(o.selectedExtras.push(e),o.extrasTotalPrice+=e.price*g()):(o.selectedExtras.splice(t,1),o.extrasTotalPrice-=e.price*g()),o.calculateTotalPrice()},o.paidClass=function(e){return e?"btn-success":"btn-warning"},o.pay=function(e){s.pay(e._id,!e.paid).then(function(t){console.log(t),e.paid=!e.paid})},n.$watch("discount",function(){o.calculateTotalPrice()})}]),angular.module("app").controller("userCtrl",["$scope","$state","AuthService","roomService","userService",function(e,t,o,n,a){a.getAllUsers().then(function(t){e.users=t,console.log(e.users)}),e.selectUser=function(t){e.selectedUser=t,console.log(e.selectedUser)},e.changeUserDetails=function(o){if(o){var n={firstName:e.selectedUser.firstName,lastName:e.selectedUser.lastName,email:e.selectedUser.email,phoneNumber:e.selectedUser.phoneNumber,role:e.selectedUser.role};a.changeUserDetails(n).then(function(e){t.reload()})}}}]),angular.module("app").controller("voucherCtrl",["$scope","$rootScope","voucherService",function(e,t,o){function n(e){return!isNaN(parseFloat(e))&&isFinite(e)}function a(e){for(var t="",o=0;o<e.length;o++){if(!n(e.charAt(o)))return t=Number(t);t+=e.charAt(o)}return t=Number(t)}e.generateVouchers=function(){e.vouchers={codes:[]};var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",o=e.voucherExpiryDate;if(o<new Date)e.voucherError="Data wygaśnięcia nie może być z przeszłości",e.vouchersGenerated=!1,e.generatedVouchers={};else{for(e.voucherError=void 0;e.vouchers.codes.length<e.numberOfVouchers;){for(var n="",r=0;r<4;r++){for(var s=0;s<5;s++)n+=t.charAt(Math.floor(Math.random()*t.length));3!=r&&(n+="-")}e.vouchers.codes.push(n)}var c=e.discount.charAt(e.discount.length-1);"%"===c?e.vouchers.discountType="%":"ł"===c&&"z"===e.discount.charAt(e.discount.length-2)&&(e.vouchers.discountType="zl"),e.vouchers.discount=a(e.discount),e.vouchers.expiryDate=o,e.generatedVouchers=e.vouchers.codes,e.vouchersGenerated=!0,e.vouchersSaved=!1}},e.saveVouchers=function(){console.log(e.vouchers),o.saveVouchers(e.vouchers).then(function(e){}),e.vouchersSaved=!0},e.checkVoucher=function(){console.log(e.voucher),o.checkVoucher(e.voucher.toString()).then(function(o){console.log(o),e.voucherNotFound=void 0,e.voucherFound="Kod poprawny zniżka "+o.discount+o.discountType,t.discount={amount:o.discount,type:o.discountType,code:e.voucher},console.log(o.discount)},function(o){console.log(o),t.discount=void 0,e.voucherNotFound=o,e.voucherFound=void 0})},e.codeChanged=function(){e.bookingFrm.$valid||(e.voucherFound=void 0,e.voucherNotFound=void 0,t.discount=void 0)}}]),angular.module("app").filter("uniqueCategories",function(){return function(e,t){if(angular.isArray(e)){for(var o=[],n={},a=0;a<e.length;a++){var r=e[a][t];angular.isUndefined(n[r])&&(n[r]=!0,o.push(e[a]))}return o}return e}}),angular.module("app").service("AuthService",["$http","$q",function(e,t,o){function n(){var e=window.localStorage.getItem(i);console.log("loading User info..."),e&&s(e)}function a(){c=void 0,u=!1,e.defaults.headers.common.Authorization=void 0,window.localStorage.removeItem(i)}function r(e){window.localStorage.setItem(i,e),s(e)}function s(t){u=!0,c=t,e.defaults.headers.common.Authorization=c}var c,i="token",u=!1,l=function(o){return t(function(t,n){e.post("/api/authenticate",o).then(function(e){e.data.success?(r(e.data.token),t(e.data.msg,e.data.success)):n(e.data.msg,e.data.success)})})},d=function(){a()},g=function(o){return t(function(t,n){e.post("/api/signup",o).then(function(e){e.data.success?(console.log("jestem w resolve"),t(e.data.msg)):n(e.data.msg)})})};n();var f=function(){return t(function(t,o){e.get("/api/userinfo").then(function(e){e.data.success?t({firstName:e.data.firstName,lastName:e.data.lastName,email:e.data.email,phone:e.data.phone,role:e.data.role}):o(e.data.msg)})})},m=function(){return t(function(t,o){e.get("/api/getUserBookings").then(function(e){t(e.data)})})},p=function(o){return t(function(t,a){e.post("/api/changeUserDetails",o).then(function(s){s.data.success?(console.log("hello"),e.post("/api/getNewToken",{email:o.email}).then(function(e){e.data.success?(console.log("result2 success"),r(e.data.token),n()):console.log("error nowego tokena")}),t({success:!0,msg:"Pomyślnie zmieniono dane"})):a({success:!1,msg:"coś poszło nie tak"})})})},h=function(o,n){return t(function(t,a){e.post("/api/change-password",{oldPass:o,newPass:n}).then(function(e){e.data.success?t({msg:"pomyślnie zmieniono haslo"}):a({msg:e.data.error})})})},v=function(){return t(function(t,o){e.get("/api/userinfo").then(function(e){e.data.success?t({role:e.data.role}):o(e.data.msg)})})};return{signin:l,signout:d,signup:g,getUserInfo:f,getUserBookings:m,changeUserDetails:p,changePassword:h,getUserRole:v,isAuthenticated:u}}]),angular.module("app").service("offerSvc",["$q","$http",function(e,t){var o=function(e){choosenRoom=e},n=function(){return choosenRoom},a=function(){return e(function(e,o){t.get("/api/getExtras").then(function(t){t.data.success?e(t.data.extras):o(t.data.error)})})};return{chooseRoom:o,getRoom:n,getExtras:a}}]),angular.module("app").service("roomService",["$q","$http",function(e,t){var o=function(o){return e(function(e,n){t.post("/api/findRooms",o).then(function(t){t.data.success?(console.log("Pobrano pokoje"),e(t.data.rooms)):n(t.data.error)})})},n=function(o){return e(function(e,n){t.post("/api/reserve",o).then(function(t){t.data.success?e(t.data.success):n(t.data.error)})})},a=function(o,n){return e(function(e,a){console.log("jetem przed post cancel"),t.post("/api/cancelBooking",{room_id:o,booking_id:n}).then(function(t){t.data.success?(console.log("resolve cancel"),e(t.data.success)):(console.log("reject cancel"),a(t.data.error))})})},r=function(){return e(function(e,o){t.get("/api/getRooms").then(function(t){t.data.success?e(t.data.result):o(t.data.error)})})},s=function(o){return e(function(e,n){t.post("/api/getRoomBookings",{room_id:o}).then(function(t){console.log(t.data[0].reservations),e(t.data[0])},function(e){n(e.data)})})},c=function(o){return e(function(e,n){t.post("/api/getUserInfo",{email:o}).then(function(t){t.data.error?n(t.data):e(t.data)},function(e){n(e.data)})})},i=function(o,n,a,r,s){return console.log(s),e(function(e,c){t.post("/api/signupAndBook",{firstName:o.firstName,lastName:o.lastName,email:o.email,number:o.phone,id:n,from:a.dateFrom,to:a.dateTo,price:r,extras:s}).then(function(t){e("OK")},function(e){c("Wystąpił błąd podczas rezerwacji")})})},u=function(o,n,a,r,s){return console.log("Serwis: roomSvc, funkcja: adminBook | id:"+o+", email: "+n),e(function(e,c){t.post("/api/adminBook",{id:o,email:n,from:a.dateFrom,to:a.dateTo,price:r,extras:s}).then(function(t){t.data.success?e("OK"):c("Wystąpił błąd podczas rezerwacji")},function(e){c("Wystąpił błąd podczas rezerwacji")})})},l=function(){return e(function(e,o){t.get("/api/getUsersEmails").then(function(t){(t.data.success=!1)?o("Nie znaleziono użytkowników"):e(t.data)},function(e){o("Nie znaleziono użytkowników")})})},d=function(o,n){return e(function(e,a){t.post("/api/paid",{id:o,pay:n}).then(function(t){t.data.success?e(!0):a(!1)})})};return{getRooms:o,getAllRooms:r,bookRoom:n,cancelBooking:a,getRoomBookings:s,getUserInfo:c,signupAndBook:i,adminBook:u,getUsersEmails:l,pay:d}}]),angular.module("app").service("userService",["$q","$http",function(e,t){var o=function(){return e(function(e,o){t.get("/api/getAllUsers").then(function(t){e(t.data)},function(e){o(e.data)})})},n=function(o){return e(function(e,n){t.post("/api/adminChangeUserDetails",o).then(function(t){t.data.success?e({success:!0,msg:"Pomyślnie zmieniono dane"}):n({success:!1,msg:"coś poszło nie tak"})})})};return{getAllUsers:o,changeUserDetails:n}}]),angular.module("app").service("voucherService",["$q","$http",function(e,t){var o=function(o){return console.log(o),e(function(e,n){t.post("/api/saveVouchers",o).then(function(t){t.data.success?e(t.data.msg):n(t.data.msg)},function(e){n(e.data.msg)})})},n=function(o){return e(function(e,n){t.post("/api/checkVoucher",{voucherCode:o}).then(function(t){t.data.success&&new Date(t.data.voucher.expiryDate)<new Date?n("Termin miną"):t.data.success&&t.data.voucher.used?n("Kod został już wykożystany"):t.data.success&&!t.data.voucher.used?e(t.data.voucher):n(t.data.error)})})},a=function(o){return e(function(e,n){t.post("/api/useVoucher",{code:o}).then(function(t){t.data.success?e("Klucz wykorzystany."):n(t.data.error)})})};return{saveVouchers:o,checkVoucher:n,useVoucher:a}}]);
//# sourceMappingURL=data:application/json;base64,
