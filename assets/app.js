var app=angular.module("app",["ngRoute","ui.router","ngCookies"]);angular.module("app").factory("authInterceptor",["$window",function(e){return{request:function(o){return o.headers=o.headers||{},e.localStorage.token&&(o.headers.Authorization=e.localStorage.token),o}}}]).config(["$stateProvider","$urlRouterProvider",function(e,o){e.state("home",{url:"/main",controller:"roomCtrl",templateUrl:"main"}).state("offer",{url:"/offer",controller:"offerCtrl",templateUrl:"offer"}).state("confirmation",{url:"/confirmation",templateUrl:"confirmation"}).state("successfulBooking",{url:"/successfulBooking",templateUrl:"successfulBooking"}).state("successfulSignup",{url:"/successfulSignup",templateUrl:"successfulSignup"}).state("account",{url:"/account",templateUrl:"account"}).state("signin",{url:"/signin",templateUrl:"signin"}).state("signup",{url:"/signup",templateUrl:"signup"}).state("account.bookings",{url:"/bookings",templateUrl:"bookings"}).state("account.details",{url:"/details",templateUrl:"details"}).state("account.changePassword",{url:"/changePassword",templateUrl:"changePassword"}).state("managment",{url:"/managment",templateUrl:"managment"}).state("managment-bookings",{url:"/managment-bookings",templateUrl:"/managment-bookings"}).state("test",{url:"/test",templateUrl:"test"}),o.otherwise("/main")}]).run(["$rootScope","$state","$stateParams",function(e,o,t){e.$state=o,e.$stateParams=t}]),angular.module("app").controller("accCtrl",["$scope","$state","AuthService","roomService",function(e,o,t,n){e.regex="(\\+[0-9]\\d{1})*(\\s)*([0-9]\\d{2})(\\s*)([0-9]\\d{2})(\\s*)([0-9]\\d{2})",e.changeUserDetails=function(e,n,a,r,s){if(e){var i={firstName:n,lastName:a,email:r,phoneNumber:s};t.changeUserDetails(i).then(function(e){o.reload()})}},e.cancelBooking=function(e,t){console.log("room id to:"+e+", booking_id to:"+t),n.cancelBooking(e,t).then(function(e){console.log("udało się anulować"),o.reload()})};var a=function(){t.getUserBookings().then(function(o){console.log(o),e.userBookings=o})},r=function(){t.getUserInfo().then(function(o){console.log(o),e.firstName=o.firstName,e.lastName=o.lastName,e.email=o.email,e.phone=o.phone})};e.changePassword=function(o,n,a){o&&t.changePassword(n,a).then(function(o){console.log(o.msg),e.successfulPasswordChange=!0},function(o){e.wrongPassword=!0})},e.checkDate=function(e){var o=new Date,t=new Date(e);return t>o},r(),a()}]),angular.module("app").controller("authCtrl",["$q","$scope","$state","$window","$location","$route","$rootScope","AuthService",function(e,o,t,n,a,r,s,i){o.regex="(\\+[0-9]\\d{1})*(\\s)*([0-9]\\d{2})(\\s*)([0-9]\\d{2})(\\s*)([0-9]\\d{2})",o.submitError=!1,o.errorMessage="",s.isLoggedIn=function(){return i.isAuthenticated},s.isLoggedIn()&&i.getUserRole().then(function(e){s.role=e.role}),o.signin=function(){console.log("login"),i.signin(o.user).then(function(e,o){s.isLogedIn=!0,i.getUserRole().then(function(e){s.role=e.role}),n.location.reload(),console.log(e)})},o.signout=function(){i.signout(),s.isLogedIn=!1,t.go("home").then(function(){n.location.reload()}),console.log("logout")},o.getUserInfo=function(){i.getUserInfo().then(function(e){console.log(e),o.userinfo=e})},o.submitForm=function(e){e?i.signup(o.user).then(function(e){console.log("Pomyślnie zarejestrowano"),o.submitError=!1,i.signin(o.user).then(function(e,o){s.isLogedIn=!0,"http://localhost:3001/#/confirmation"==n.location.toString()?n.location.reload():t.go("successfulSignup").then(function(){n.location.reload()})})},function(e){switch(console.log(e),e.code){case 11e3:o.submitError=!0,o.errorMessage="Wybrany email jest już zarejestrowany. Proszę wybrać inny.";break;default:o.submitError=!0,o.errorMessage="Upss coś poszło nie tak. Proszę spróbować później."}}):(o.submitError=!0,o.errorMessage="Upss coś poszło nie tak. Proszę spróbować później.")},o.$watch("submitError",function(e){console.log(e)})}]),angular.module("app").controller("confirmationCtrl",["$q","$window","$location","$state","$cookies","$scope","$rootScope","AuthService","roomService",function(e,o,t,n,a,r,s,i,c){r.isSignedIn=!1,r.room=JSON.parse(a.get("room")),r.dateFrom=JSON.parse(a.get("dates")).dateFrom,r.dateTo=JSON.parse(a.get("dates")).dateTo,r.extras=JSON.parse(a.get("extras")).extras,r.numOfDays=JSON.parse(a.get("extras")).numOfDays;var u=function(){i.isAuthenticated?r.isSignedIn=!0:r.isSignedIn=!1};r.reserve=function(){1!=r.terms?alert("Przed potwierdzeniem rezerwacji należy zaakceptowaćregulamin."):c.bookRoom({id:r.room._id,from:r.dateFrom,to:r.dateTo,price:l(),extras:r.extras}).then(function(){n.go("successfulBooking")},function(e){})},r.toPrevious=function(){n.go("offer")};var l=function(){var e=0;return e=r.room.price*r.numOfDays,r.extras.forEach(function(o){e+=o.price*r.numOfDays}),e};u()}]),angular.module("app").directive("compareTo",function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,o,t,n){n.$validators.compareTo=function(o){return o==e.otherModelValue},e.$watch("otherModelValue",function(){n.$validate()})}}}).directive("userInfo",function(){return{template:"<p>sialala</p>"}}),angular.module("app").controller("offerCtrl",["$scope","$cookies","$state","$location","$window","offerSvc",function(e,o,t,n,a,r){e.offer={},e.extras=[],e.selectedExtras=[];var s={};e.dateFrom="",e.dateTo="",e.roomName="";var i=function(){e.offer=JSON.parse(o.get("room")),e.extras=u(),s=JSON.parse(o.get("dates")),e.dateFrom=c(new Date(s.dateFrom)),e.dateTo=c(new Date(s.dateTo)),e.roomName=e.offer.type,e.roomPrice=e.offer.price*l(),e.extrasTotalPrice=0},c=function(e){var o=e.getUTCDate(),t=e.getUTCMonth()+1,n=e.getUTCFullYear();return""+o+"-"+t+"-"+n};e.addOrRemoveExtra=function(o){var t=e.selectedExtras.indexOf(o);o.buttonText=o.buttonToggle?"Dodaj +":"Usuń -",o.buttonToggle=!o.buttonToggle,t==-1?(e.selectedExtras.push(o),e.extrasTotalPrice+=o.price*l()):(e.selectedExtras.splice(t,1),e.extrasTotalPrice-=o.price*l())},e.toConfirmation=function(){console.log("asdasd");var n={extras:e.selectedExtras,numOfDays:l()};o.put("extras",JSON.stringify(n)),t.go("confirmation")},e.toPrevious=function(){t.go("home")};var u=function(){r.getExtras().then(function(o){e.extras=o;for(var t=0;t<e.extras.length;t++)e.extras[t].buttonText="Dodaj +",e.extras[t].buttonToggle=!1})},l=function(){var e=864e5,o=new Date(s.dateFrom),t=new Date(s.dateTo),n=Date.UTC(o.getFullYear(),o.getMonth(),o.getDate()),a=Date.UTC(t.getFullYear(),t.getMonth(),t.getDate());return Math.floor((a-n)/e)};i()}]),angular.module("app").controller("roomCtrl",["$q","$cookies","$scope","$window","$location","roomService","offerSvc","$filter","$state",function(e,o,t,n,a,r,s,i,c){t.dateFrom="",t.dateTo="",t.noRoomsError=!1,t.errorMsg="",t.rooms=[],t.numberOfBeds=1,t.successfulCancel=!1,t.totalPrice=0,t.extras=[],t.selectedExtras=[],t.extrasTotalPrice=0,t.selectOrAddUser=void 0,t.select=function(e){t.selectedRoom=e};var u=function(){var e=new Date;console.log(e),t.dateFrom=e;var o=new Date;o.setDate(o.getDate()+1),t.dateTo=o};t.init=function(){u(),t.findRooms()},t.findRooms=function(){if(t.dateTo.getMonth()<=t.dateFrom.getMonth()&&t.dateTo.getDate()<=t.dateFrom.getDate()){var e=t.dateFrom;e.setDate(e.getDate()+1),t.dateTo=e}r.getRooms({from:t.dateFrom.toISOString(),to:t.dateTo.toISOString(),beds:t.numberOfBeds}).then(function(e){e.length>0?(t.rooms=e,t.noRoomsError=!1):t.noRoomsError=!0},function(e){t.noRoomsError=!0,t.errorMsg="Coś poszło nie tak."})},t.addRoom=function(e){o.put("room",JSON.stringify(e)),o.put("dates",JSON.stringify({dateFrom:t.dateFrom,dateTo:t.dateTo})),s.chooseRoom(e),c.go("offer")},t.test=function(){console.log(t.rooms),t.findRooms()},t.getAllRooms=function(){r.getAllRooms().then(function(e){t.allRooms=e,console.log(e)},function(e){})},t.getAvailability=function(e){for(var o=(new Date,new Date(t.roomDateFrom)),n=new Date(t.roomDateTo),a=0;a<e.length;a++){var r=new Date(e[a].from),s=new Date(e[a].to);if(o<s&&n>r)return"notAvailable"}return"available"},t.managmentInit=function(){var e=new Date;t.roomDateFrom=e;var o=new Date;o.setDate(o.getDate()+1),t.roomDateTo=o,t.getAllRooms()},t.toBookings=function(e){o.put("selectedRoom",JSON.stringify(e)),$("#regulamin").modal("hide"),setTimeout(function(){c.go("managment-bookings")},500)},t.getSelectedRoom=function(){t.selectedRoom=JSON.parse(o.get("selectedRoom"))},t.checkDate=function(e){var o=new Date,t=new Date(e);return t>o},t.cancelBooking=function(e,o){console.log("room id to:"+e+", booking_id to:"+o),r.cancelBooking(e,o).then(function(e){console.log("udało się anulować"),c.reload()})},t.getRoomBookings=function(){t.getSelectedRoom(),r.getRoomBookings(t.selectedRoom._id).then(function(e){t.bookings=e.reservations})},t.selectUser=function(e){r.getUserInfo(e).then(function(e){t.selectedUser=e,console.log(t.selectedUser)})},t.toBooking=function(e,t,n){o.put("booking",JSON.stringify({room:e,dateFrom:t,dateTo:n})),$("#regulamin").modal("hide"),setTimeout(function(){c.go("test")},500)},t.initBooking=function(){t.booking=JSON.parse(o.get("booking")),t.test.dateFrom=new Date(t.booking.dateFrom),t.test.dateTo=new Date(t.booking.dateTo),t.calculateTotalPrice(),g(),r.getUsers().then(function(e){t.users=JSON.parse(JSON.stringify(e))})},t.submitBookForm=function(){var e=null;if(t.selectOrAddUser){if(void 0==t.test.email)var e={email:""+t.test.firstName+t.test.lastName+t.test.phone,firstName:t.test.firstName,lastName:t.test.lastName,phone:t.test.phone};else var e={email:t.test.email,firstName:t.test.firstName,lastName:t.test.lastName,phone:t.test.phone};r.signupAndBook(e,t.booking.room._id,{dateFrom:t.test.dateFrom,dateTo:t.test.dateTo},t.totalPrice,t.selectedExtras).then(function(e){console.log(e)})}else e=JSON.parse(t.selectedUserBooking),console.log("RoomCtrl, funkcja submitBookForm, dataOd: "+t.test.dateFrom),r.adminBook(t.booking.room._id,e.email,{dateFrom:t.test.dateFrom,dateTo:t.test.dateTo},t.totalPrice,t.selectedExtras).then(function(e){console.log(e)})};var l=function(){var e=864e5,o=new Date(t.test.dateFrom),n=new Date(t.test.dateTo),a=Date.UTC(o.getFullYear(),o.getMonth(),o.getDate()),r=Date.UTC(n.getFullYear(),n.getMonth(),n.getDate());return Math.floor((r-a)/e)};t.calculateTotalPrice=function(){t.totalPrice=l()*t.booking.room.price+t.extrasTotalPrice};var g=function(){s.getExtras().then(function(e){t.extras=e;for(var o=0;o<t.extras.length;o++)t.extras[o].buttonText="Dodaj +",t.extras[o].buttonToggle=!1})};t.addOrRemoveExtra=function(e){var o=t.selectedExtras.indexOf(e);e.buttonText=e.buttonToggle?"Dodaj +":"Usuń -",e.buttonToggle=!e.buttonToggle,t.totalPrice=0,o==-1?(t.selectedExtras.push(e),t.extrasTotalPrice+=e.price*l()):(t.selectedExtras.splice(o,1),t.extrasTotalPrice-=e.price*l()),t.calculateTotalPrice()},t.paidClass=function(e){return e?"btn-success":"btn-warning"},t.pay=function(e){r.pay(e._id,!e.paid).then(function(o){console.log(o),e.paid=!e.paid})}}]),angular.module("app").controller("voucherCtrl",["$scope",function(e){e.generateVouchers=function(){for(var o,t=[],n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";t.length<e.numberOfVouchers;){for(var a="",r=0;r<4;r++){for(var s=0;s<5;s++)a+=n.charAt(Math.floor(Math.random()*n.length));3!=r&&(a+="-")}t.push(a)}var i=e.discount.charAt(e.discount.length-1);"%"===i?o="percent":"ł"===i&&"z"===e.discount.charAt(e.discount.length-2)&&console.log(i),e.generatedVouchers=t}}]),angular.module("app").filter("uniqueCategories",function(){return function(e,o){if(angular.isArray(e)){for(var t=[],n={},a=0;a<e.length;a++){var r=e[a][o];angular.isUndefined(n[r])&&(n[r]=!0,t.push(e[a]))}return t}return e}}),angular.module("app").service("AuthService",["$http","$q",function(e,o,t){function n(){var e=window.localStorage.getItem(c);console.log("loading User info..."),e&&s(e)}function a(){i=void 0,u=!1,e.defaults.headers.common.Authorization=void 0,window.localStorage.removeItem(c)}function r(e){window.localStorage.setItem(c,e),s(e)}function s(o){u=!0,i=o,e.defaults.headers.common.Authorization=i}var i,c="token",u=!1,l=function(t){return o(function(o,n){e.post("/api/authenticate",t).then(function(e){e.data.success?(r(e.data.token),o(e.data.msg,e.data.success)):n(e.data.msg,e.data.success)})})},g=function(){a()},d=function(t){return o(function(o,n){e.post("/api/signup",t).then(function(e){e.data.success?(console.log("jestem w resolve"),o(e.data.msg)):n(e.data.msg)})})};n();var f=function(){return o(function(o,t){e.get("/api/userinfo").then(function(e){e.data.success?o({firstName:e.data.firstName,lastName:e.data.lastName,email:e.data.email,phone:e.data.phone,role:e.data.role}):t(e.data.msg)})})},m=function(){return o(function(o,t){e.get("/api/getUserBookings").then(function(e){o(e.data)})})},p=function(t){return o(function(o,a){e.post("/api/test",t).then(function(s){s.data.success?(console.log("hello"),e.post("/api/getNewToken",{email:t.email}).then(function(e){e.data.success?(console.log("result2 success"),r(e.data.token),n()):console.log("error nowego tokena")}),o({success:!0,msg:"Pomyślnie zmieniono dane"})):a({success:!1,msg:"coś poszło nie tak"})})})},h=function(t,n){return o(function(o,a){e.post("/api/change-password",{oldPass:t,newPass:n}).then(function(e){e.data.success?o({msg:"pomyślnie zmieniono haslo"}):a({msg:e.data.error})})})},v=function(){return o(function(o,t){e.get("/api/userinfo").then(function(e){e.data.success?o({role:e.data.role}):t(e.data.msg)})})};return{signin:l,signout:g,signup:d,getUserInfo:f,getUserBookings:m,changeUserDetails:p,changePassword:h,getUserRole:v,isAuthenticated:u}}]),angular.module("app").service("offerSvc",["$q","$http",function(e,o){var t=function(e){choosenRoom=e},n=function(){return choosenRoom},a=function(){return e(function(e,t){o.get("/api/getExtras").then(function(o){o.data.success?e(o.data.extras):t(o.data.error)})})};return{chooseRoom:t,getRoom:n,getExtras:a}}]),angular.module("app").service("roomService",["$q","$http",function(e,o){var t=function(t){return e(function(e,n){o.post("/api/findRooms",t).then(function(o){o.data.success?(console.log("Pobrano pokoje"),e(o.data.rooms)):n(o.data.error)})})},n=function(t){return e(function(e,n){o.post("/api/reserve",t).then(function(o){o.data.success?e(o.data.success):n(o.data.error)})})},a=function(t,n){return e(function(e,a){console.log("jetem przed post cancel"),o.post("/api/cancelBooking",{room_id:t,booking_id:n}).then(function(o){o.data.success?(console.log("resolve cancel"),e(o.data.success)):(console.log("reject cancel"),a(o.data.error))})})},r=function(){return e(function(e,t){o.get("/api/getRooms").then(function(o){o.data.success?e(o.data.result):t(o.data.error)})})},s=function(t){return e(function(e,n){o.post("/api/getRoomBookings",{room_id:t}).then(function(o){console.log(o.data[0].reservations),e(o.data[0])},function(e){n(e.data)})})},i=function(t){return e(function(e,n){o.post("/api/getUserInfo",{email:t}).then(function(o){o.data.error?n(o.data):e(o.data)},function(e){n(e.data)})})},c=function(t,n,a,r,s){return console.log(s),e(function(e,i){o.post("/api/signupAndBook",{firstName:t.firstName,lastName:t.lastName,email:t.email,number:t.phone,id:n,from:a.dateFrom,to:a.dateTo,price:r,extras:s}).then(function(e){console.log(e)},function(e){console.log("nie udało się")})})},u=function(t,n,a,r,s){return console.log("Serwis: roomSvc, funkcja: adminBook | id:"+t+", email: "+n),e(function(e,i){o.post("/api/adminBook",{id:t,email:n,from:a.dateFrom,to:a.dateTo,price:r,extras:s}).then(function(o){o.data.success?e("OK"):i("Wystąpił błąd podczas rezerwacji")},function(e){i("Wystąpił błąd podczas rezerwacji")})})},l=function(){return e(function(e,t){o.get("/api/getUsers").then(function(o){(o.data.success=!1)?t("Nie znaleziono użytkowników"):e(o.data)},function(e){t("Nie znaleziono użytkowników")})})},g=function(t,n){return e(function(e,a){o.post("/api/paid",{id:t,pay:n}).then(function(o){o.data.success?e(!0):a(!1)})})};return{getRooms:t,getAllRooms:r,bookRoom:n,cancelBooking:a,getRoomBookings:s,getUserInfo:i,signupAndBook:c,adminBook:u,getUsers:l,pay:g}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImNvbmZpZy5qcyIsImNvbnRyb2xsZXJzL2FjY291bnRDb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvYXV0aG9yaXphdGlvbi5qcyIsImNvbnRyb2xsZXJzL2NvbmZpcm1hdGlvbkNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9kaXJlY3RpdmVzLmpzIiwiY29udHJvbGxlcnMvb2ZmZXJDb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvcm9vbUNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy92b3VjaGVyQ29udHJvbGxlci5qcyIsImZpbGx0ZXJzL3Jvb21GaWx0ZXIuanMiLCJzZXJ2aWNlcy9hdXRob3JpemF0aW9uLnN2Yy5qcyIsInNlcnZpY2VzL29mZmVyLnN2Yy5qcyIsInNlcnZpY2VzL3Jvb20uc3ZjLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJmYWN0b3J5IiwiJHdpbmRvdyIsInJlcXVlc3QiLCJjb25maWciLCJoZWFkZXJzIiwibG9jYWxTdG9yYWdlIiwidG9rZW4iLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsInN0YXRlIiwidXJsIiwiY29udHJvbGxlciIsInRlbXBsYXRlVXJsIiwib3RoZXJ3aXNlIiwicnVuIiwiJHJvb3RTY29wZSIsIiRzdGF0ZSIsIiRzdGF0ZVBhcmFtcyIsIiRzY29wZSIsIkF1dGhTZXJ2aWNlIiwicm9vbVNlcnZpY2UiLCJyZWdleCIsImNoYW5nZVVzZXJEZXRhaWxzIiwiaXNWYWxpZCIsImZOYW1lIiwibE5hbWUiLCJuRW1haWwiLCJuUGhvbmUiLCJuZXdEZXRhaWxzIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJlbWFpbCIsInBob25lTnVtYmVyIiwidGhlbiIsImEiLCJyZWxvYWQiLCJjYW5jZWxCb29raW5nIiwicm9vbV9pZCIsImJvb2tpbmdfaWQiLCJjb25zb2xlIiwibG9nIiwiZ2V0VXNlckJvb2tpbmdzIiwibXNnIiwidXNlckJvb2tpbmdzIiwiZ2V0SW5mbyIsImdldFVzZXJJbmZvIiwidXNlciIsInBob25lIiwiY2hhbmdlUGFzc3dvcmQiLCJ2YWxpZCIsIm9sZFAiLCJuZXdQIiwicmVzIiwic3VjY2Vzc2Z1bFBhc3N3b3JkQ2hhbmdlIiwicmVqIiwid3JvbmdQYXNzd29yZCIsImNoZWNrRGF0ZSIsImRhdGUiLCJjdXJyZW50RGF0ZSIsIkRhdGUiLCJkYXRlRnJvbSIsIiRxIiwiJGxvY2F0aW9uIiwiJHJvdXRlIiwic3VibWl0RXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJpc0xvZ2dlZEluIiwiaXNBdXRoZW50aWNhdGVkIiwiZ2V0VXNlclJvbGUiLCJyZXN1bHQiLCJyb2xlIiwic2lnbmluIiwic3VjY2VzcyIsImlzTG9nZWRJbiIsImxvY2F0aW9uIiwic2lnbm91dCIsImdvIiwidXNlcmluZm8iLCJzdWJtaXRGb3JtIiwic2lnbnVwIiwiZGF0YSIsInRvU3RyaW5nIiwiY29kZSIsIiR3YXRjaCIsIiRjb29raWVzIiwiaXNTaWduZWRJbiIsInJvb20iLCJKU09OIiwicGFyc2UiLCJnZXQiLCJkYXRlVG8iLCJleHRyYXMiLCJudW1PZkRheXMiLCJpbml0IiwicmVzZXJ2ZSIsInRlcm1zIiwiYWxlcnQiLCJib29rUm9vbSIsImlkIiwiX2lkIiwiZnJvbSIsInRvIiwicHJpY2UiLCJjYWxjdWxhdGVUb3RhbFByaWNlIiwiZXJyb3IiLCJ0b1ByZXZpb3VzIiwidG90YWwiLCJmb3JFYWNoIiwiZSIsImRpcmVjdGl2ZSIsInJlcXVpcmUiLCJzY29wZSIsIm90aGVyTW9kZWxWYWx1ZSIsImxpbmsiLCJlbGVtZW50IiwiYXR0cmlidXRlcyIsIm5nTW9kZWwiLCIkdmFsaWRhdG9ycyIsImNvbXBhcmVUbyIsIm1vZGVsVmFsdWUiLCIkdmFsaWRhdGUiLCJ0ZW1wbGF0ZSIsIm9mZmVyU3ZjIiwib2ZmZXIiLCJzZWxlY3RlZEV4dHJhcyIsImRhdGVzIiwicm9vbU5hbWUiLCJzaG93T2ZmZXIiLCJnZXRFeHRyYXMiLCJkYXRlUHJlZXRpZnkiLCJ0eXBlIiwicm9vbVByaWNlIiwiY2FsY3VsYXRlRGlmZk9mRGF5cyIsImV4dHJhc1RvdGFsUHJpY2UiLCJkYXkiLCJnZXRVVENEYXRlIiwibW9udGgiLCJnZXRVVENNb250aCIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsImFkZE9yUmVtb3ZlRXh0cmEiLCJleHRyYSIsImluZGV4IiwiaW5kZXhPZiIsImJ1dHRvblRleHQiLCJidXR0b25Ub2dnbGUiLCJwdXNoIiwic3BsaWNlIiwidG9Db25maXJtYXRpb24iLCJwdXQiLCJzdHJpbmdpZnkiLCJleHRyYXNEYXRhIiwiaSIsImxlbmd0aCIsIk1TX1BFUl9EQVkiLCJkYXRlRnJvbVVUQyIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZGF0ZVRvVVRDIiwiTWF0aCIsImZsb29yIiwiJGZpbHRlciIsIm5vUm9vbXNFcnJvciIsImVycm9yTXNnIiwicm9vbXMiLCJudW1iZXJPZkJlZHMiLCJzdWNjZXNzZnVsQ2FuY2VsIiwidG90YWxQcmljZSIsInNlbGVjdE9yQWRkVXNlciIsInVuZGVmaW5lZCIsInNlbGVjdCIsInNlbGVjdGVkUm9vbSIsInNldERhdGUiLCJkYXRlVGVtcCIsImZpbmRSb29tcyIsImdldFJvb21zIiwidG9JU09TdHJpbmciLCJiZWRzIiwicm9vbXNEYXRhIiwiYWRkUm9vbSIsImNob29zZVJvb20iLCJ0ZXN0IiwiZ2V0QWxsUm9vbXMiLCJhbGxSb29tcyIsImdldEF2YWlsYWJpbGl0eSIsInJlc2VydmF0aW9ucyIsInJvb21EYXRlRnJvbSIsInJvb21EYXRlVG8iLCJtYW5hZ21lbnRJbml0IiwidG9Cb29raW5ncyIsIiQiLCJtb2RhbCIsInNldFRpbWVvdXQiLCJnZXRTZWxlY3RlZFJvb20iLCJnZXRSb29tQm9va2luZ3MiLCJiIiwiYm9va2luZ3MiLCJzZWxlY3RVc2VyIiwidSIsInNlbGVjdGVkVXNlciIsInRvQm9va2luZyIsImluaXRCb29raW5nIiwiYm9va2luZyIsImdldFVzZXJzIiwidXNlcnMiLCJzdWJtaXRCb29rRm9ybSIsInNpZ251cEFuZEJvb2siLCJzZWxlY3RlZFVzZXJCb29raW5nIiwiYWRtaW5Cb29rIiwicGFpZENsYXNzIiwicGFpZCIsInBheSIsImdlbmVyYXRlVm91Y2hlcnMiLCJkaXNjb3VudFR5cGUiLCJ2b3VjaGVycyIsInBvc3NpYmxlIiwibnVtYmVyT2ZWb3VjaGVycyIsInZvdWNoZXIiLCJqIiwiY2hhckF0IiwicmFuZG9tIiwibGFzdCIsImRpc2NvdW50IiwiZ2VuZXJhdGVkVm91Y2hlcnMiLCJmaWx0ZXIiLCJwcm9wZXJ0eU5hbWUiLCJpc0FycmF5Iiwia2V5cyIsInZhbCIsImlzVW5kZWZpbmVkIiwic2VydmljZSIsIiRodHRwIiwibG9hZFVzZXJJbmZvIiwid2luZG93IiwiZ2V0SXRlbSIsIkxPQ0FMX1RPS0VOIiwidXNlckluZm8iLCJkZXN0cm95VXNlckluZm8iLCJhdXRoVG9rZW4iLCJkZWZhdWx0cyIsImNvbW1vbiIsInJlbW92ZUl0ZW0iLCJzdG9yZVVzZXJJbmZvIiwic2V0SXRlbSIsInJlc29sdmUiLCJyZWplY3QiLCJwb3N0IiwicmVzdWx0MiIsIm9sZFBhc3MiLCJuZXdQYXNzIiwiY2hvb3NlblJvb20iLCJnZXRSb29tIiwibnVtYmVyIiwicmVzZXJ2YXRpb25faWQiXSwibWFwcGluZ3MiOiJBQUdBLEdBQUFBLEtBQUFDLFFBQUFDLE9BQUEsT0FBQSxVQUFBLFlBQUEsYUNBQUQsU0FBQUMsT0FBQSxPQUNBQyxRQUFBLG1CQUFBLFVBQUEsU0FBQUMsR0FDQSxPQUNBQyxRQUFBLFNBQUFDLEdBTUEsTUFMQUEsR0FBQUMsUUFBQUQsRUFBQUMsWUFDQUgsRUFBQUksYUFBQUMsUUFDQUgsRUFBQUMsUUFBQSxjQUFBSCxFQUFBSSxhQUFBQyxPQUdBSCxPQUtBQSxRQUFBLGlCQUFBLHFCQUFBLFNBQUFJLEVBQUFDLEdBQ0FELEVBQ0FFLE1BQUEsUUFDQUMsSUFBQSxRQUNBQyxXQUFBLFdBQ0FDLFlBQUEsU0FFQUgsTUFBQSxTQUNBQyxJQUFBLFNBQ0FDLFdBQUEsWUFD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S0FBQVIsUUFDQThLLEdBQUEsR0FFQUMsR0FBQSxPQU9BLFFBQ0F0RSxTQUFBQSxFQUNBTyxZQUFBQSxFQUNBdkYsU0FBQUEsRUFDQTdELGNBQUFBLEVBQ0FnSyxnQkFBQUEsRUFDQXZKLFlBQUFBLEVBQ0FtSyxjQUFBQSxFQUNBRSxVQUFBQSxFQUNBTCxTQUFBQSxFQUNBUSxJQUFBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBQaW90ciBVc3psZXIgb24gMjIuMDkuMjAxNi5cclxuICovXHJcbnZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyduZ1JvdXRlJywgJ3VpLnJvdXRlcicsICduZ0Nvb2tpZXMnXSk7XHJcblxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBQaW90ciBVc3psZXIgb24gMTEuMTAuMjAxNi5cclxuICovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmZhY3RvcnkoJ2F1dGhJbnRlcmNlcHRvcicsIGZ1bmN0aW9uICgkd2luZG93KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ3JlcXVlc3QnOiBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYoJHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW4pe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSAkd2luZG93LmxvY2FsU3RvcmFnZS50b2tlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICAuY29uZmlnKGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XHJcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgICAgICAgLnN0YXRlKCdob21lJyx7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvbWFpbicsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncm9vbUN0cmwnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtYWluJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ29mZmVyJyx7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvb2ZmZXInLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ29mZmVyQ3RybCcsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ29mZmVyJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbmZpcm1hdGlvbicse1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2NvbmZpcm1hdGlvbicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbmZpcm1hdGlvbidcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdzdWNjZXNzZnVsQm9va2luZycse1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3N1Y2Nlc3NmdWxCb29raW5nJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3VjY2Vzc2Z1bEJvb2tpbmcnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnc3VjY2Vzc2Z1bFNpZ251cCcse1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3N1Y2Nlc3NmdWxTaWdudXAnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdWNjZXNzZnVsU2lnbnVwJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2FjY291bnQnLHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9hY2NvdW50JyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYWNjb3VudCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdzaWduaW4nLHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9zaWduaW4nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzaWduaW4nXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnc2lnbnVwJyx7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvc2lnbnVwJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2lnbnVwJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2FjY291bnQuYm9va2luZ3MnLHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9ib29raW5ncycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Jvb2tpbmdzJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2FjY291bnQuZGV0YWlscycse1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2RldGFpbHMnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdkZXRhaWxzJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2FjY291bnQuY2hhbmdlUGFzc3dvcmQnLHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9jaGFuZ2VQYXNzd29yZCcsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NoYW5nZVBhc3N3b3JkJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ21hbmFnbWVudCcse1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL21hbmFnbWVudCcsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21hbmFnbWVudCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCdtYW5hZ21lbnQtYm9va2luZ3MnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvbWFuYWdtZW50LWJvb2tpbmdzJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL21hbmFnbWVudC1ib29raW5ncydcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCd0ZXN0Jyx7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvdGVzdCcsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Rlc3QnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvbWFpbicpXHJcbiAgICB9KVxyXG4gICAgLnJ1bihbJyRyb290U2NvcGUnLCAnJHN0YXRlJywgJyRzdGF0ZVBhcmFtcycsXHJcbiAgICBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHN0YXRlLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICAkcm9vdFNjb3BlLiRzdGF0ZSA9ICRzdGF0ZTtcclxuICAgICAgICAkcm9vdFNjb3BlLiRzdGF0ZVBhcmFtcyA9ICRzdGF0ZVBhcmFtcztcclxuXHJcbiAgICB9XSk7XHJcbiAgICAvKlxyXG4gICAgLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIsICRodHRwUHJvdmlkZXIpIHtcclxuICAgICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdhdXRoSW50ZXJjZXB0b3InKTtcclxuICAgICAgICAkcm91dGVQcm92aWRlclxyXG4gICAgICAgICAgICAud2hlbignLycsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL21haW4nXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC53aGVuKCcvc2lnbnVwJywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvc2lnbnVwJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAud2hlbignL3NpZ25pbicsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvc2lnbmluJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAud2hlbignL3VzZXJpbmZvJywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdXNlcmluZm8nXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC53aGVuKCcvc3VjY2Vzc2Z1bFNpZ251cCcse1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvc3VjY2Vzc2Z1bFNpZ251cCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLndoZW4oJy9vZmZlcicse1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvb2ZmZXInXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC53aGVuKCcvY29uZmlybWF0aW9uJyx7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9jb25maXJtYXRpb24nXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC53aGVuKCcvc3VjY2Vzc2Z1bEJvb2tpbmcnLHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL3N1Y2Nlc3NmdWxCb29raW5nJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAub3RoZXJ3aXNlKCcvJyk7XHJcbiAgICB9KTtcclxuKi9cclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFBpb3RyIFVzemxlciBvbiAxNC4xMS4yMDE2LlxyXG4gKi9cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignYWNjQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZSwgQXV0aFNlcnZpY2UsIHJvb21TZXJ2aWNlKSB7XHJcblxyXG4gICAgICAgICRzY29wZS5yZWdleCA9ICcoXFxcXCtbMC05XVxcXFxkezF9KSooXFxcXHMpKihbMC05XVxcXFxkezJ9KShcXFxccyopKFswLTldXFxcXGR7Mn0pKFxcXFxzKikoWzAtOV1cXFxcZHsyfSknO1xyXG5cclxuXHJcblxyXG4gICAgICAgICRzY29wZS5jaGFuZ2VVc2VyRGV0YWlscyA9IGZ1bmN0aW9uKGlzVmFsaWQsIGZOYW1lLCBsTmFtZSwgbkVtYWlsLCBuUGhvbmUpe1xyXG4gICAgICAgICAgICBpZihpc1ZhbGlkKXtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdEZXRhaWxzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogZk5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6IGxOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBuRW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgcGhvbmVOdW1iZXI6IG5QaG9uZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIEF1dGhTZXJ2aWNlLmNoYW5nZVVzZXJEZXRhaWxzKG5ld0RldGFpbHMpLnRoZW4oZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9UT0RPIHByenljaXNrIGFudWxvd2FuaWEgdHlsa28gZGxhIHBva29pLCBrdMOzcnljaCBkYXRhIG5hIHRvIHBvendhbGFcclxuICAgICAgICAkc2NvcGUuY2FuY2VsQm9va2luZyA9IGZ1bmN0aW9uIChyb29tX2lkLCBib29raW5nX2lkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicm9vbSBpZCB0bzpcIityb29tX2lkK1wiLCBib29raW5nX2lkIHRvOlwiK2Jvb2tpbmdfaWQpO1xyXG5cclxuICAgICAgICAgICAgcm9vbVNlcnZpY2UuY2FuY2VsQm9va2luZyhyb29tX2lkLCBib29raW5nX2lkKS50aGVuKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndWRhxYJvIHNpxJkgYW51bG93YcSHJyk7XHJcbiAgICAgICAgICAgICAgICAkc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFVzZXJCb29raW5ncyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgQXV0aFNlcnZpY2UuZ2V0VXNlckJvb2tpbmdzKCkudGhlbihmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJCb29raW5ncyA9IG1zZztcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRJbmZvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBBdXRoU2VydmljZS5nZXRVc2VySW5mbygpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXIpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpcnN0TmFtZSA9IHVzZXIuZmlyc3ROYW1lO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxhc3ROYW1lID0gdXNlci5sYXN0TmFtZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbCA9IHVzZXIuZW1haWw7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucGhvbmUgPSB1c2VyLnBob25lO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vVE9ETyB1c3Rhd2ljIHBhc3N5IG5hIHplcm8gcG8gxbzEhWRhbml1IGhodHBcclxuICAgICAgICAkc2NvcGUuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbiAodmFsaWQsb2xkUCwgbmV3UCkge1xyXG4gICAgICAgICAgICBpZih2YWxpZCl7XHJcbiAgICAgICAgICAgICAgICBBdXRoU2VydmljZS5jaGFuZ2VQYXNzd29yZChvbGRQLCBuZXdQKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMubXNnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1Y2Nlc3NmdWxQYXNzd29yZENoYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9LGZ1bmN0aW9uIChyZWopIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUud3JvbmdQYXNzd29yZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmNoZWNrRGF0ZSA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgIHZhciBkYXRlRnJvbSA9IG5ldyBEYXRlKGRhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0ZUZyb20gPiBjdXJyZW50RGF0ZTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgZ2V0SW5mbygpO1xyXG4gICAgICAgIGdldFVzZXJCb29raW5ncygpO1xyXG4gICAgfSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgUGlvdHIgVXN6bGVyIG9uIDE0LjEwLjIwMTYuXHJcbiAqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdhdXRoQ3RybCcsIGZ1bmN0aW9uICgkcSwgJHNjb3BlLCAkc3RhdGUsICR3aW5kb3csICRsb2NhdGlvbiwgJHJvdXRlLCAkcm9vdFNjb3BlLCBBdXRoU2VydmljZSkge1xyXG5cclxuXHJcbiAgICAgICAgJHNjb3BlLnJlZ2V4ID0gJyhcXFxcK1swLTldXFxcXGR7MX0pKihcXFxccykqKFswLTldXFxcXGR7Mn0pKFxcXFxzKikoWzAtOV1cXFxcZHsyfSkoXFxcXHMqKShbMC05XVxcXFxkezJ9KSc7XHJcblxyXG4gICAgICAgICRzY29wZS5zdWJtaXRFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5lcnJvck1lc3NhZ2UgPSAnJztcclxuXHJcbiAgICAgICAgJHJvb3RTY29wZS5pc0xvZ2dlZEluID0gZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBBdXRoU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQ7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGlmKCRyb290U2NvcGUuaXNMb2dnZWRJbigpKSB7XHJcbiAgICAgICAgICAgIEF1dGhTZXJ2aWNlLmdldFVzZXJSb2xlKCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnJvbGUgPSByZXN1bHQucm9sZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIFxyXG4gICAgICAgICRzY29wZS5zaWduaW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsb2dpbicpO1xyXG4gICAgICAgICAgICBBdXRoU2VydmljZS5zaWduaW4oJHNjb3BlLnVzZXIpLnRoZW4oZnVuY3Rpb24gKG1zZywgc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5pc0xvZ2VkSW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgQXV0aFNlcnZpY2UuZ2V0VXNlclJvbGUoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnJvbGUgPSByZXN1bHQucm9sZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8kd2luZG93LmxvY2F0aW9uLmhyZWY9JyMvJztcclxuICAgICAgICAgICAgICAgIC8vJHN0YXRlLmdvKCdob21lJyk7XHJcbiAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXNnKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuc2lnbm91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgQXV0aFNlcnZpY2Uuc2lnbm91dCgpO1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLmlzTG9nZWRJbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgIC8vc3RhdGUuZ28oJ2hvbWUnKTtcclxuICAgICAgICAgICAgLy8kc3RhdGUucmVsb2FkKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsb2dvdXQnKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuZ2V0VXNlckluZm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIEF1dGhTZXJ2aWNlLmdldFVzZXJJbmZvKCkudGhlbihmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJpbmZvID0gbXNnO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvL1RPRE8gc3RhdGUucmVsb2FkXHJcbiAgICAgICAgJHNjb3BlLnN1Ym1pdEZvcm0gPSBmdW5jdGlvbiAoaXNWYWxpZCkge1xyXG4gICAgICAgICAgICBpZihpc1ZhbGlkKXtcclxuICAgICAgICAgICAgICAgIEF1dGhTZXJ2aWNlLnNpZ251cCgkc2NvcGUudXNlcikudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb215xZtsbmllIHphcmVqZXN0cm93YW5vJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdEVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgQXV0aFNlcnZpY2Uuc2lnbmluKCRzY29wZS51c2VyKS50aGVuKGZ1bmN0aW9uIChtc2csIHN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5pc0xvZ2VkSW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZigkd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkgPT0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMS8jL2NvbmZpcm1hdGlvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3N1Y2Nlc3NmdWxTaWdudXAnKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyR3aW5kb3cubG9jYXRpb24uaHJlZj0nIy9zdWNjZXNzZnVsU2lnbnVwJztcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaChkYXRhLmNvZGUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExMDAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdEVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1lc3NhZ2UgPSAnV3licmFueSBlbWFpbCBqZXN0IGp1xbwgemFyZWplc3Ryb3dhbnkuIFByb3N6xJkgd3licmHEhyBpbm55Lic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdWJtaXRFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JNZXNzYWdlID0gJ1Vwc3MgY2/FmyBwb3N6xYJvIG5pZSB0YWsuIFByb3N6xJkgc3Byw7Nib3dhxIcgcMOzxbpuaWVqLic7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0RXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yTWVzc2FnZSA9ICdVcHNzIGNvxZsgcG9zesWCbyBuaWUgdGFrLiBQcm9zesSZIHNwcsOzYm93YcSHIHDDs8W6bmllai4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnc3VibWl0RXJyb3InLCBmdW5jdGlvbiAoZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSlcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgfSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgUGlvdHIgVXN6bGVyIG9uIDExLjExLjIwMTYuXHJcbiAqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdjb25maXJtYXRpb25DdHJsJywgZnVuY3Rpb24gKCRxLCAkd2luZG93LCAkbG9jYXRpb24sICRzdGF0ZSwgJGNvb2tpZXMsICRzY29wZSwgJHJvb3RTY29wZSwgQXV0aFNlcnZpY2UsIHJvb21TZXJ2aWNlKSB7XHJcblxyXG4gICAgICAgICRzY29wZS5pc1NpZ25lZEluID0gZmFsc2U7XHJcblxyXG4gICAgICAgICRzY29wZS5yb29tID0gSlNPTi5wYXJzZSgkY29va2llcy5nZXQoJ3Jvb20nKSk7XHJcbiAgICAgICAgJHNjb3BlLmRhdGVGcm9tID0gSlNPTi5wYXJzZSgkY29va2llcy5nZXQoJ2RhdGVzJykpLmRhdGVGcm9tO1xyXG4gICAgICAgICRzY29wZS5kYXRlVG8gPSBKU09OLnBhcnNlKCRjb29raWVzLmdldCgnZGF0ZXMnKSkuZGF0ZVRvO1xyXG4gICAgICAgICRzY29wZS5leHRyYXMgPSBKU09OLnBhcnNlKCRjb29raWVzLmdldCgnZXh0cmFzJykpLmV4dHJhcztcclxuICAgICAgICAkc2NvcGUubnVtT2ZEYXlzID0gSlNPTi5wYXJzZSgkY29va2llcy5nZXQoJ2V4dHJhcycpKS5udW1PZkRheXM7XHJcblxyXG4gICAgICAgIHZhciBpbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBBdXRoU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQgPyAkc2NvcGUuaXNTaWduZWRJbiA9IHRydWUgOiAkc2NvcGUuaXNTaWduZWRJbiA9IGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICRzY29wZS5yZXNlcnZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZigkc2NvcGUudGVybXMgIT0gdHJ1ZSlcclxuICAgICAgICAgICAgICAgIGFsZXJ0KCdQcnplZCBwb3R3aWVyZHplbmllbSByZXplcndhY2ppIG5hbGXFvHkgemFha2NlcHRvd2HEh3JlZ3VsYW1pbi4nKTtcclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHJvb21TZXJ2aWNlLmJvb2tSb29tKHtpZDogJHNjb3BlLnJvb20uX2lkLCBmcm9tOiAkc2NvcGUuZGF0ZUZyb20sIHRvOiAkc2NvcGUuZGF0ZVRvLCBwcmljZTogY2FsY3VsYXRlVG90YWxQcmljZSgpLCBleHRyYXM6ICRzY29wZS5leHRyYXN9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyR3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcjL3N1Y2Nlc3NmdWxCb29raW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3N1Y2Nlc3NmdWxCb29raW5nJylcclxuICAgICAgICAgICAgICAgIH0sZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9UT0RPIHd5xZt3aWV0bGVuaWUgZXJycm9yYVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUudG9QcmV2aW91cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8kd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnIy9vZmZlcidcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdvZmZlcicpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNhbGN1bGF0ZVRvdGFsUHJpY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0b3RhbCA9IDA7XHJcbiAgICAgICAgICAgIHRvdGFsID0gKCRzY29wZS5yb29tLnByaWNlICogJHNjb3BlLm51bU9mRGF5cyk7XHJcbiAgICAgICAgICAgICRzY29wZS5leHRyYXMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdG90YWwgKz0gZS5wcmljZSAqICRzY29wZS5udW1PZkRheXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdG90YWw7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vVE9ETyB6cm9iaWVuaWUgcmVqZXN0cmFjamkobW/FvGUgcHJ6ZW5pZXNpZW5pZSBuYSBzaWdudXAgdmlldz8gZG8gcm96d2HFvGVuaWEpIGkgb2JzxYJ1Z2EgYsWCxJlkw7N3KG1vxbxlIGpha2/FmyBwb8WCxIVjennEhyBvYnlkd2EgbG9nb3dhbmlhIGkgcmVqZXN0cmFjamUgdyBqZWRubz8pXHJcbiAgICAgICAgLy9UT0RPIE9ic2x1Z2EgYmxlZG93IHJlemVyd2FjamlcclxuICAgICAgICAvL1RPRE8gZG9kYW5pZSBjemVnb3MgZG8gd2lkb2t1IHJlemVyd2FqY2lcclxuICAgICAgICAvL1RPRE8gcG91c8Ozd2HEhyBqYWtpZcWbIGluaXR5KHd5c3RhY3p5IHd5b8WCYcSHIGZ1bmtjasSZIHcga29udHJvbGVyemUgbHViIHNydilcclxuICAgICAgICAvL1RPRE8gZG9kYW5pZSBjYcWCZWogb2JzxYJ1Z2kga29udGEoem1pYW5hIGhhc8WCYSwgbnVtZXJ1IHRlbGVmb251W2RvZGFuaWUgbHViIHptaWFuYV0sIHBvZGdsxIVkdSByZXplcndhY2ppLCBpdHApIG9yYXogb2JzxYJ1Z2kgaG90ZWx1KENSVUQgZG9kYXRrw7N3LCBwb2tvamkgaXRwKS5cclxuICAgICAgICAvL1RPRE8gZG9kYW5pZSBtb8W8ZSBqYWtpxZsgd3lrcmVzw7N3IG5hIHRlbWF0IG9iY2nEhcW8ZW5pYSBwb2tvamkgbHViIGpha2nFmyBwcnp5Y2hvZMOzdyBjenkgY2/FmyBhbGJvIGphaWXFmyBjb8WbIGRvIGdlbmVyb3dhbmllIHBkZiB6IHJhcG9ydGVtXHJcbiAgICAgICAgLy9UT0RPIHBvem1pZW5pYcSHIHPFgm93YSByZXNlcnZhdGlvbiBpdHAgbmEgYm9va2luZ1xyXG4gICAgICAgIC8vVE9ETyBrb2R5IHJhYmF0b3dlXHJcbiAgICAgICAgLy9UT0RPIHBvd2lhZG9taWVuaWUgbyBjaWFzdGVjemthY2hcclxuICAgICAgICAvL1RPRE8gZG9kYW5pZSBwb2RnbMSFZHUgb2LFgm/FvGVuaWEgaG90ZWx1IGphayB3IGtpbmkoMyBzdGFueTogd29sbnksIHphcmV6ZXJ3b3dhbnksIHphamV0eSlcclxuICAgICAgICAvL1RPRE8gemJhZGFuaWUgY3p5IC5ydW4gc3RhdGVQcm92aWRlcmEgcG9jemVibmVcclxuICAgICAgICAvL1RPRE8gcG96bmFuaWUgc3RhdGVQcm92aWRlcmEgaSBkb2RhbmllIG5lc3RlZCB2aWV3c1xyXG4gICAgICAgIC8vVE9ETyBuYSBnxYLDs3duZWogc3Ryb25pZSB6cm9iacSHxbxlYnkgZGF0YSBiecWCxIUgY29uYWptbmllaiBqZWRlbiBkemllbiByZXplcndhY2ppXHJcbiAgICAgICAgLy9UT0RPIHptaWFuYSByZWdleCBuYSByb290U2NvcGUgamVzbGkgbW96bGl3ZVxyXG4gICAgICAgIC8vVE9EbyBkYXRhIHJlemVyd2FjamkgdHlsa28gb2QgZGF0eSBkemlzaWVqc3plaiAoYmV6IHJlemVyd2FjamkgdyBwcnplc3rFgm/Fm2NpKVxyXG4gICAgICAgIC8vVE9ETyBrb250b1xyXG4gICAgICAgIC8vem1pYW5hIGRhbnljaFxyXG4gICAgICAgIC8vem1pYW5hIGhhc8WCYVxyXG4gICAgICAgIC8vem9iYWN6ZW5pZSByZXplcndhY2ppXHJcbiAgICAgICAgLy9hbnVsb3dhbmllIHJlemVyd2FjamlcclxuICAgICAgICAvL1xyXG4gICAgICAgIGluaXQoKTtcclxuXHJcbiAgICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ2NvbXBhcmVUbycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXF1aXJlOiBcIm5nTW9kZWxcIixcclxuICAgICAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgICAgIG90aGVyTW9kZWxWYWx1ZTogXCI9Y29tcGFyZVRvXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMsIG5nTW9kZWwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBuZ01vZGVsLiR2YWxpZGF0b3JzLmNvbXBhcmVUbyA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWxWYWx1ZSA9PSBzY29wZS5vdGhlck1vZGVsVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChcIm90aGVyTW9kZWxWYWx1ZVwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZ01vZGVsLiR2YWxpZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSlcclxuICAgIC5kaXJlY3RpdmUoJ3VzZXJJbmZvJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybntcclxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8cD5zaWFsYWxhPC9wPidcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgUGlvdHIgVXN6bGVyIG9uIDA4LjExLjIwMTYuXHJcbiAqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdvZmZlckN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkY29va2llcywgJHN0YXRlLCAkbG9jYXRpb24sICR3aW5kb3csIG9mZmVyU3ZjKSB7XHJcbiAgICAgICAgJHNjb3BlLm9mZmVyID0ge307XHJcbiAgICAgICAgJHNjb3BlLmV4dHJhcyA9IFtdO1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZEV4dHJhcyA9IFtdO1xyXG4gICAgICAgIHZhciBkYXRlcyA9IHt9O1xyXG4gICAgICAgICRzY29wZS5kYXRlRnJvbSA9ICcnO1xyXG4gICAgICAgICRzY29wZS5kYXRlVG8gPSAnJztcclxuICAgICAgICAkc2NvcGUucm9vbU5hbWUgPSAnJztcclxuXHJcblxyXG4gICAgICAgIHZhciBzaG93T2ZmZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5vZmZlciA9IEpTT04ucGFyc2UoJGNvb2tpZXMuZ2V0KCdyb29tJykpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZXh0cmFzID0gZ2V0RXh0cmFzKCk7XHJcblxyXG4gICAgICAgICAgICBkYXRlcyA9IEpTT04ucGFyc2UoJGNvb2tpZXMuZ2V0KCdkYXRlcycpKTtcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGVGcm9tID0gZGF0ZVByZWV0aWZ5KG5ldyBEYXRlKGRhdGVzLmRhdGVGcm9tKSk7XHJcbiAgICAgICAgICAgICRzY29wZS5kYXRlVG8gPSBkYXRlUHJlZXRpZnkobmV3IERhdGUoZGF0ZXMuZGF0ZVRvKSk7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUucm9vbU5hbWUgPSAkc2NvcGUub2ZmZXIudHlwZTtcclxuICAgICAgICAgICAgJHNjb3BlLnJvb21QcmljZSA9ICRzY29wZS5vZmZlci5wcmljZSAqIGNhbGN1bGF0ZURpZmZPZkRheXMoKTtcclxuICAgICAgICAgICAgJHNjb3BlLmV4dHJhc1RvdGFsUHJpY2UgPSAwO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZGF0ZVByZWV0aWZ5ID0gZnVuY3Rpb24gKGRhdGUpIHtcclxuICAgICAgICAgICAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xyXG4gICAgICAgICAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCkgKyAxO1xyXG4gICAgICAgICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuICcnK2RheSsnLScrbW9udGgrJy0nK3llYXI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmFkZE9yUmVtb3ZlRXh0cmEgPSBmdW5jdGlvbiAoZXh0cmEpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5zZWxlY3RlZEV4dHJhcy5pbmRleE9mKGV4dHJhKTtcclxuICAgICAgICAgICAgZXh0cmEuYnV0dG9uVGV4dCA9IGV4dHJhLmJ1dHRvblRvZ2dsZSA/ICdEb2RhaiArJyA6ICdVc3XFhCAtJztcclxuICAgICAgICAgICAgZXh0cmEuYnV0dG9uVG9nZ2xlID0gIWV4dHJhLmJ1dHRvblRvZ2dsZTtcclxuXHJcbiAgICAgICAgICAgIGlmKGluZGV4ID09IC0xKXtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEV4dHJhcy5wdXNoKGV4dHJhKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5leHRyYXNUb3RhbFByaWNlICs9IChleHRyYS5wcmljZSAqIGNhbGN1bGF0ZURpZmZPZkRheXMoKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRFeHRyYXMuc3BsaWNlKGluZGV4LDEpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV4dHJhc1RvdGFsUHJpY2UgLT0gKGV4dHJhLnByaWNlICogY2FsY3VsYXRlRGlmZk9mRGF5cygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS50b0NvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2FzZGFzZCcpO1xyXG4gICAgICAgICAgICB2YXIgZXh0cmFzID0ge2V4dHJhczogJHNjb3BlLnNlbGVjdGVkRXh0cmFzLCBudW1PZkRheXM6IGNhbGN1bGF0ZURpZmZPZkRheXMoKX07XHJcbiAgICAgICAgICAgICRjb29raWVzLnB1dCgnZXh0cmFzJywgSlNPTi5zdHJpbmdpZnkoZXh0cmFzKSk7XHJcbiAgICAgICAgICAgIC8vJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJyMvY29uZmlybWF0aW9uJ1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2NvbmZpcm1hdGlvbicpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnRvUHJldmlvdXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJyMvbWFpbidcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdob21lJylcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0RXh0cmFzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBvZmZlclN2Yy5nZXRFeHRyYXMoKS50aGVuKGZ1bmN0aW9uIChleHRyYXNEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXh0cmFzID0gZXh0cmFzRGF0YTtcclxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDAgOyBpIDwgJHNjb3BlLmV4dHJhcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4dHJhc1tpXS5idXR0b25UZXh0ID0gJ0RvZGFqICsnO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5leHRyYXNbaV0uYnV0dG9uVG9nZ2xlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjYWxjdWxhdGVEaWZmT2ZEYXlzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgTVNfUEVSX0RBWSA9IDEwMDAgKiA2MCAqIDYwICogMjQ7XHJcbiAgICAgICAgICAgIHZhciBkYXRlRnJvbSA9IG5ldyBEYXRlKGRhdGVzLmRhdGVGcm9tKTtcclxuICAgICAgICAgICAgdmFyIGRhdGVUbyA9IG5ldyBEYXRlKGRhdGVzLmRhdGVUbyk7XHJcbiAgICAgICAgICAgIHZhciBkYXRlRnJvbVVUQyA9IERhdGUuVVRDKGRhdGVGcm9tLmdldEZ1bGxZZWFyKCksIGRhdGVGcm9tLmdldE1vbnRoKCksIGRhdGVGcm9tLmdldERhdGUoKSk7XHJcbiAgICAgICAgICAgIHZhciBkYXRlVG9VVEMgPSBEYXRlLlVUQyhkYXRlVG8uZ2V0RnVsbFllYXIoKSwgZGF0ZVRvLmdldE1vbnRoKCksIGRhdGVUby5nZXREYXRlKCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoZGF0ZVRvVVRDIC0gZGF0ZUZyb21VVEMpIC8gTVNfUEVSX0RBWSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2hvd09mZmVyKCk7XHJcbiAgICB9KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBQaW90ciBVc3psZXIgb24gMDYuMTEuMjAxNi5cclxuICovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ3Jvb21DdHJsJywgZnVuY3Rpb24gKCRxLCAkY29va2llcywgJHNjb3BlLCAkd2luZG93LCAkbG9jYXRpb24sIHJvb21TZXJ2aWNlLCBvZmZlclN2YywkZmlsdGVyLCAkc3RhdGUpIHtcclxuICAgICAgICAkc2NvcGUuZGF0ZUZyb20gPSAnJztcclxuICAgICAgICAkc2NvcGUuZGF0ZVRvID0gJyc7XHJcbiAgICAgICAgJHNjb3BlLm5vUm9vbXNFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5lcnJvck1zZyA9Jyc7XHJcbiAgICAgICAgJHNjb3BlLnJvb21zID0gW107XHJcbiAgICAgICAgJHNjb3BlLm51bWJlck9mQmVkcyA9IDE7XHJcblxyXG4gICAgICAgICRzY29wZS5zdWNjZXNzZnVsQ2FuY2VsID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLnRvdGFsUHJpY2UgPSAwO1xyXG5cclxuXHJcbiAgICAgICAgJHNjb3BlLmV4dHJhcyA9IFtdO1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZEV4dHJhcyA9IFtdO1xyXG4gICAgICAgICRzY29wZS5leHRyYXNUb3RhbFByaWNlID0gMDtcclxuXHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdE9yQWRkVXNlciA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uIChyb29tKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZFJvb20gPSByb29tO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBzZXREYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGUpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZUZyb20gPSBkYXRlO1xyXG4gICAgICAgICAgICB2YXIgZGF0ZVRlbXAgPSBuZXcgRGF0ZTtcclxuICAgICAgICAgICAgZGF0ZVRlbXAuc2V0RGF0ZShkYXRlVGVtcC5nZXREYXRlKCkrMSk7XHJcbiAgICAgICAgICAgICRzY29wZS5kYXRlVG8gPSBkYXRlVGVtcDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2V0RGF0ZSgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuZmluZFJvb21zKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmZpbmRSb29tcyA9IGZ1bmN0aW9uICgpIHsvL1RPRE8gb2dhcm5hYyBzaWUgeiB0eW0gYmVkcywgd3lzenVraXdhYyBwb2tvamUgbyBwb2RhbmVqIGlsb3NjaSBvc29iIGkgbmF6d2FjIHRvIGpha29zIHcgYmF6aWUgb3N0YXRlY3puaWVcclxuICAgICAgICAgICAgaWYoJHNjb3BlLmRhdGVUby5nZXRNb250aCgpIDw9ICRzY29wZS5kYXRlRnJvbS5nZXRNb250aCgpICYmICRzY29wZS5kYXRlVG8uZ2V0RGF0ZSgpIDw9ICRzY29wZS5kYXRlRnJvbS5nZXREYXRlKCkpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGUgPSAkc2NvcGUuZGF0ZUZyb207XHJcbiAgICAgICAgICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkrMSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZVRvID0gZGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByb29tU2VydmljZS5nZXRSb29tcyh7XHJcbiAgICAgICAgICAgICAgICBmcm9tOiAkc2NvcGUuZGF0ZUZyb20udG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgIHRvOiAkc2NvcGUuZGF0ZVRvLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICBiZWRzOiAkc2NvcGUubnVtYmVyT2ZCZWRzXHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJvb21zRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYocm9vbXNEYXRhLmxlbmd0aCA+MCl7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJvb21zID0gcm9vbXNEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ub1Jvb21zRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubm9Sb29tc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubm9Sb29tc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5lcnJvck1zZyA9ICdDb8WbIHBvc3rFgm8gbmllIHRhay4nXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5hZGRSb29tID0gZnVuY3Rpb24gKHJvb20pIHtcclxuICAgICAgICAgICAgJGNvb2tpZXMucHV0KCdyb29tJywgSlNPTi5zdHJpbmdpZnkocm9vbSkpO1xyXG4gICAgICAgICAgICAkY29va2llcy5wdXQoJ2RhdGVzJywgSlNPTi5zdHJpbmdpZnkoe2RhdGVGcm9tOiAkc2NvcGUuZGF0ZUZyb20sIGRhdGVUbzogJHNjb3BlLmRhdGVUb30pKTtcclxuICAgICAgICAgICAgb2ZmZXJTdmMuY2hvb3NlUm9vbShyb29tKTtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdvZmZlcicpO1xyXG4gICAgICAgICAgICAvLyR3aW5kb3cubG9jYXRpb24uaHJlZj0nIy9vZmZlcic7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnRlc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5yb29tcyk7XHJcbiAgICAgICAgICAgICRzY29wZS5maW5kUm9vbXMoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuZ2V0QWxsUm9vbXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJvb21TZXJ2aWNlLmdldEFsbFJvb21zKCkudGhlbihmdW5jdGlvbiAocm9vbXMpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbGxSb29tcyA9IHJvb21zO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocm9vbXMpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIC8vVE9ETyBvYnPFgnVnYSBlcnJvcmFcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgJHNjb3BlLmdldEF2YWlsYWJpbGl0eSA9IGZ1bmN0aW9uIChyZXNlcnZhdGlvbnMpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgdmFyIHJvb21EYXRlRnJvbSA9IG5ldyBEYXRlKCRzY29wZS5yb29tRGF0ZUZyb20pO1xyXG4gICAgICAgICAgICB2YXIgcm9vbURhdGVUbyA9IG5ldyBEYXRlKCRzY29wZS5yb29tRGF0ZVRvKTtcclxuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHJlc2VydmF0aW9ucy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZUZyb20gPSBuZXcgRGF0ZShyZXNlcnZhdGlvbnNbaV0uZnJvbSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZVRvID0gbmV3IERhdGUocmVzZXJ2YXRpb25zW2ldLnRvKTtcclxuICAgICAgICAgICAgICAgIGlmKHJvb21EYXRlRnJvbSA8IGRhdGVUbyAmJiByb29tRGF0ZVRvID4gZGF0ZUZyb20pe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbm90QXZhaWxhYmxlJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAnYXZhaWxhYmxlJ1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5tYW5hZ21lbnRJbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5yb29tRGF0ZUZyb20gPSBkYXRlO1xyXG4gICAgICAgICAgICB2YXIgZGF0ZVRlbXAgPSBuZXcgRGF0ZTtcclxuICAgICAgICAgICAgZGF0ZVRlbXAuc2V0RGF0ZShkYXRlVGVtcC5nZXREYXRlKCkrMSk7XHJcbiAgICAgICAgICAgICRzY29wZS5yb29tRGF0ZVRvID0gZGF0ZVRlbXA7XHJcbiAgICAgICAgICAgICRzY29wZS5nZXRBbGxSb29tcygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgJHNjb3BlLnRvQm9va2luZ3MgPSBmdW5jdGlvbiAocm9vbSkge1xyXG4gICAgICAgICAgICAkY29va2llcy5wdXQoJ3NlbGVjdGVkUm9vbScsIEpTT04uc3RyaW5naWZ5KHJvb20pKTtcclxuICAgICAgICAgICAgJCgnI3JlZ3VsYW1pbicpLm1vZGFsKCdoaWRlJyk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnbWFuYWdtZW50LWJvb2tpbmdzJyk7XHJcbiAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmdldFNlbGVjdGVkUm9vbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkUm9vbSA9IEpTT04ucGFyc2UoJGNvb2tpZXMuZ2V0KCdzZWxlY3RlZFJvb20nKSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICRzY29wZS5jaGVja0RhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICB2YXIgZGF0ZUZyb20gPSBuZXcgRGF0ZShkYXRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGVGcm9tID4gY3VycmVudERhdGU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmNhbmNlbEJvb2tpbmcgPSBmdW5jdGlvbiAocm9vbV9pZCwgYm9va2luZ19pZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJvb20gaWQgdG86XCIrcm9vbV9pZCtcIiwgYm9va2luZ19pZCB0bzpcIitib29raW5nX2lkKTtcclxuXHJcbiAgICAgICAgICAgIHJvb21TZXJ2aWNlLmNhbmNlbEJvb2tpbmcocm9vbV9pZCwgYm9va2luZ19pZCkudGhlbihmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3VkYcWCbyBzacSZIGFudWxvd2HEhycpO1xyXG4gICAgICAgICAgICAgICAgJHN0YXRlLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5nZXRSb29tQm9va2luZ3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5nZXRTZWxlY3RlZFJvb20oKTtcclxuICAgICAgICAgICAgcm9vbVNlcnZpY2UuZ2V0Um9vbUJvb2tpbmdzKCRzY29wZS5zZWxlY3RlZFJvb20uX2lkKS50aGVuKGZ1bmN0aW9uIChiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYm9va2luZ3MgPSBiLnJlc2VydmF0aW9ucztcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuc2VsZWN0VXNlciA9IGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgIHJvb21TZXJ2aWNlLmdldFVzZXJJbmZvKHVzZXIpLnRoZW4oZnVuY3Rpb24gKHUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZFVzZXIgPSB1O1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnNlbGVjdGVkVXNlcik7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnRvQm9va2luZyA9IGZ1bmN0aW9uIChyb29tLCBkYXRlRnJvbSwgZGF0ZVRvKSB7XHJcbiAgICAgICAgICAgICRjb29raWVzLnB1dCgnYm9va2luZycsIEpTT04uc3RyaW5naWZ5KHtyb29tOiByb29tLCBkYXRlRnJvbTogZGF0ZUZyb20sIGRhdGVUbzogZGF0ZVRvfSkpO1xyXG4gICAgICAgICAgICAkKCcjcmVndWxhbWluJykubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCd0ZXN0Jyk7XHJcbiAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmluaXRCb29raW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuYm9va2luZyA9IEpTT04ucGFyc2UoJGNvb2tpZXMuZ2V0KCdib29raW5nJykpO1xyXG4gICAgICAgICAgICAkc2NvcGUudGVzdC5kYXRlRnJvbSA9IG5ldyBEYXRlKCRzY29wZS5ib29raW5nLmRhdGVGcm9tKTtcclxuICAgICAgICAgICAgJHNjb3BlLnRlc3QuZGF0ZVRvID0gbmV3IERhdGUoJHNjb3BlLmJvb2tpbmcuZGF0ZVRvKTtcclxuICAgICAgICAgICAgJHNjb3BlLmNhbGN1bGF0ZVRvdGFsUHJpY2UoKTtcclxuICAgICAgICAgICAgZ2V0RXh0cmFzKCk7XHJcbiAgICAgICAgICAgIHJvb21TZXJ2aWNlLmdldFVzZXJzKCkudGhlbihmdW5jdGlvbiAodXNlcnMpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS51c2VycyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodXNlcnMpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLy9UT0RPIGRvZGFuaWUgZG9kYXRrw7N3IGkgb2JsaWN6ZW5pZSBjZW55XHJcbiAgICAgICAgJHNjb3BlLnN1Ym1pdEJvb2tGb3JtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdXNlciA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmKCRzY29wZS5zZWxlY3RPckFkZFVzZXIpe1xyXG4gICAgICAgICAgICAgICAgaWYoJHNjb3BlLnRlc3QuZW1haWwgPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXNlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IFwiXCIrJHNjb3BlLnRlc3QuZmlyc3ROYW1lKyRzY29wZS50ZXN0Lmxhc3ROYW1lKyRzY29wZS50ZXN0LnBob25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6ICRzY29wZS50ZXN0LmZpcnN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6ICRzY29wZS50ZXN0Lmxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG9uZTogJHNjb3BlLnRlc3QucGhvbmVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXNlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6ICRzY29wZS50ZXN0LmVtYWlsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6ICRzY29wZS50ZXN0LmZpcnN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6ICRzY29wZS50ZXN0Lmxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG9uZTogJHNjb3BlLnRlc3QucGhvbmVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcm9vbVNlcnZpY2Uuc2lnbnVwQW5kQm9vayh1c2VyLCAkc2NvcGUuYm9va2luZy5yb29tLl9pZCwge2RhdGVGcm9tOiAkc2NvcGUudGVzdC5kYXRlRnJvbSwgZGF0ZVRvOiAkc2NvcGUudGVzdC5kYXRlVG99LCAkc2NvcGUudG90YWxQcmljZSwgJHNjb3BlLnNlbGVjdGVkRXh0cmFzKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1c2VyID0gSlNPTi5wYXJzZSgkc2NvcGUuc2VsZWN0ZWRVc2VyQm9va2luZyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJvb21DdHJsLCBmdW5rY2phIHN1Ym1pdEJvb2tGb3JtLCBkYXRhT2Q6IFwiKyRzY29wZS50ZXN0LmRhdGVGcm9tKTtcclxuICAgICAgICAgICAgICAgIHJvb21TZXJ2aWNlLmFkbWluQm9vaygkc2NvcGUuYm9va2luZy5yb29tLl9pZCwgdXNlci5lbWFpbCAse2RhdGVGcm9tOiAkc2NvcGUudGVzdC5kYXRlRnJvbSwgZGF0ZVRvOiAkc2NvcGUudGVzdC5kYXRlVG99LCAkc2NvcGUudG90YWxQcmljZSwgJHNjb3BlLnNlbGVjdGVkRXh0cmFzKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2FsY3VsYXRlRGlmZk9mRGF5cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIE1TX1BFUl9EQVkgPSAxMDAwICogNjAgKiA2MCAqIDI0O1xyXG4gICAgICAgICAgICB2YXIgZGF0ZUZyb20gPSBuZXcgRGF0ZSgkc2NvcGUudGVzdC5kYXRlRnJvbSk7XHJcbiAgICAgICAgICAgIHZhciBkYXRlVG8gPSBuZXcgRGF0ZSgkc2NvcGUudGVzdC5kYXRlVG8pO1xyXG4gICAgICAgICAgICB2YXIgZGF0ZUZyb21VVEMgPSBEYXRlLlVUQyhkYXRlRnJvbS5nZXRGdWxsWWVhcigpLCBkYXRlRnJvbS5nZXRNb250aCgpLCBkYXRlRnJvbS5nZXREYXRlKCkpO1xyXG4gICAgICAgICAgICB2YXIgZGF0ZVRvVVRDID0gRGF0ZS5VVEMoZGF0ZVRvLmdldEZ1bGxZZWFyKCksIGRhdGVUby5nZXRNb250aCgpLCBkYXRlVG8uZ2V0RGF0ZSgpKTtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKGRhdGVUb1VUQyAtIGRhdGVGcm9tVVRDKSAvIE1TX1BFUl9EQVkpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5jYWxjdWxhdGVUb3RhbFByaWNlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnRvdGFsUHJpY2UgPSAoY2FsY3VsYXRlRGlmZk9mRGF5cygpICogJHNjb3BlLmJvb2tpbmcucm9vbS5wcmljZSkgKyAkc2NvcGUuZXh0cmFzVG90YWxQcmljZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0RXh0cmFzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBvZmZlclN2Yy5nZXRFeHRyYXMoKS50aGVuKGZ1bmN0aW9uIChleHRyYXNEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXh0cmFzID0gZXh0cmFzRGF0YTtcclxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDAgOyBpIDwgJHNjb3BlLmV4dHJhcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4dHJhc1tpXS5idXR0b25UZXh0ID0gJ0RvZGFqICsnO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5leHRyYXNbaV0uYnV0dG9uVG9nZ2xlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgJHNjb3BlLmFkZE9yUmVtb3ZlRXh0cmEgPSBmdW5jdGlvbiAoZXh0cmEpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5zZWxlY3RlZEV4dHJhcy5pbmRleE9mKGV4dHJhKTtcclxuICAgICAgICAgICAgZXh0cmEuYnV0dG9uVGV4dCA9IGV4dHJhLmJ1dHRvblRvZ2dsZSA/ICdEb2RhaiArJyA6ICdVc3XFhCAtJztcclxuICAgICAgICAgICAgZXh0cmEuYnV0dG9uVG9nZ2xlID0gIWV4dHJhLmJ1dHRvblRvZ2dsZTtcclxuICAgICAgICAgICAgJHNjb3BlLnRvdGFsUHJpY2UgPSAwO1xyXG4gICAgICAgICAgICBpZihpbmRleCA9PSAtMSl7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRFeHRyYXMucHVzaChleHRyYSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXh0cmFzVG90YWxQcmljZSArPSBleHRyYS5wcmljZSAqIGNhbGN1bGF0ZURpZmZPZkRheXMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEV4dHJhcy5zcGxpY2UoaW5kZXgsMSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXh0cmFzVG90YWxQcmljZSAtPSBleHRyYS5wcmljZSAqIGNhbGN1bGF0ZURpZmZPZkRheXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuY2FsY3VsYXRlVG90YWxQcmljZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgJHNjb3BlLnBhaWRDbGFzcyA9IGZ1bmN0aW9uIChwYWlkKSB7XHJcbiAgICAgICAgICAgIGlmKHBhaWQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2J0bi1zdWNjZXNzJztcclxuICAgICAgICAgICAgcmV0dXJuICdidG4td2FybmluZydcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5wYXkgPSBmdW5jdGlvbiAoYm9va2luZykge1xyXG4gICAgICAgICAgICByb29tU2VydmljZS5wYXkoYm9va2luZy5faWQsICFib29raW5nLnBhaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIGJvb2tpbmcucGFpZCA9ICFib29raW5nLnBhaWQ7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFBpb3RyIFVzemxlciBvbiAxMS4xMi4yMDE2LlxyXG4gKi9cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCd2b3VjaGVyQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuXHJcblxyXG4gICAgLy9JbGUsIGN6eSB3aWVsb2tyb3RuZWdvIHV6eXRrdSwgZGF0YSB3eWdhxZtuacSZY2lhXHJcbiAgICAkc2NvcGUuZ2VuZXJhdGVWb3VjaGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdm91Y2hlcnMgPSBbXTtcclxuICAgICAgICB2YXIgcG9zc2libGUgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCI7XHJcbiAgICAgICAgdmFyIGRpc2NvdW50VHlwZTtcclxuXHJcbiAgICAgICAgd2hpbGUodm91Y2hlcnMubGVuZ3RoIDwgJHNjb3BlLm51bWJlck9mVm91Y2hlcnMpe1xyXG4gICAgICAgICAgICB2YXIgdm91Y2hlciA9IFwiXCI7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCA0OyBpKyspe1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8IDU7IGorKylcclxuICAgICAgICAgICAgICAgICAgICB2b3VjaGVyICs9IHBvc3NpYmxlLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZS5sZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgIGlmKGkgIT0gMyApdm91Y2hlciArPSAnLSc7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZvdWNoZXJzLnB1c2godm91Y2hlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbGFzdCA9ICRzY29wZS5kaXNjb3VudC5jaGFyQXQoJHNjb3BlLmRpc2NvdW50Lmxlbmd0aC0xKTtcclxuICAgICAgICBpZihsYXN0ID09PSAnJScpXHJcbiAgICAgICAgICAgIGRpc2NvdW50VHlwZSA9ICdwZXJjZW50J1xyXG4gICAgICAgIGVsc2UgaWYobGFzdCA9PT0gJ8WCJyAmJiAkc2NvcGUuZGlzY291bnQuY2hhckF0KCRzY29wZS5kaXNjb3VudC5sZW5ndGgtMikgPT09ICd6JylcclxuICAgICAgICAgICAgY29uc29sZS5sb2cobGFzdCk7XHJcbiAgICAgICAgJHNjb3BlLmdlbmVyYXRlZFZvdWNoZXJzID0gdm91Y2hlcnM7XHJcbiAgICB9XHJcbn0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFBpb3RyIFVzemxlciBvbiAwNy4xMS4yMDE2LlxyXG4gKi9cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmlsdGVyKCd1bmlxdWVDYXRlZ29yaWVzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAocm9vbXMsIHByb3BlcnR5TmFtZSkge1xyXG4gICAgICAgICAgICBpZihhbmd1bGFyLmlzQXJyYXkocm9vbXMpKXtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBrZXlzID0ge307XHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgcm9vbXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSByb29tc1tpXVtwcm9wZXJ0eU5hbWVdXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoYW5ndWxhci5pc1VuZGVmaW5lZChrZXlzW3ZhbF0pKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5c1t2YWxdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocm9vbXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcm9vbXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBQaW90ciBVc3psZXIgb24gMTQuMTAuMjAxNi5cclxuICovXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgLnNlcnZpY2UoJ0F1dGhTZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEsICRyb290U2NvcGUpIHtcclxuICAgICAgICB2YXIgTE9DQUxfVE9LRU4gPSAndG9rZW4nO1xyXG4gICAgICAgIHZhciBpc0F1dGhlbnRpY2F0ZWQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgYXV0aFRva2VuO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsb2FkVXNlckluZm8oKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShMT0NBTF9UT0tFTik7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsb2FkaW5nIFVzZXIgaW5mby4uLicpOy8vRG8gdXN1bmnEmWNpYVxyXG4gICAgICAgICAgICBpZih0b2tlbil7XHJcbiAgICAgICAgICAgICAgICB1c2VySW5mbyh0b2tlbik7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkZXN0cm95VXNlckluZm8oKSB7XHJcbiAgICAgICAgICAgIGF1dGhUb2tlbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgaXNBdXRoZW50aWNhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydBdXRob3JpemF0aW9uJ10gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShMT0NBTF9UT0tFTik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzdG9yZVVzZXJJbmZvKHRva2VuKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShMT0NBTF9UT0tFTiwgdG9rZW4pO1xyXG4gICAgICAgICAgICB1c2VySW5mbyh0b2tlbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB1c2VySW5mbyh0b2tlbikge1xyXG4gICAgICAgICAgICBpc0F1dGhlbnRpY2F0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBhdXRoVG9rZW4gPSB0b2tlbjtcclxuICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9IGF1dGhUb2tlbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzaWduaW4gPSBmdW5jdGlvbiAodXNlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9hdXRoZW50aWNhdGUnLCB1c2VyKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmVVc2VySW5mbyhyZXN1bHQuZGF0YS50b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEubXNnLCByZXN1bHQuZGF0YS5zdWNjZXNzKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzdWx0LmRhdGEubXNnLCByZXN1bHQuZGF0YS5zdWNjZXNzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICB2YXIgc2lnbm91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZGVzdHJveVVzZXJJbmZvKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHNpZ251cCA9IGZ1bmN0aW9uICh1c2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3NpZ251cCcsIHVzZXIpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnamVzdGVtIHcgcmVzb2x2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhLm1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3VsdC5kYXRhLm1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsb2FkVXNlckluZm8oKTtcclxuXHJcbiAgICAgICAgdmFyIGdldFVzZXJJbmZvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3VzZXJpbmZvJykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0LmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe2ZpcnN0TmFtZTogcmVzdWx0LmRhdGEuZmlyc3ROYW1lLCBsYXN0TmFtZTogcmVzdWx0LmRhdGEubGFzdE5hbWUsIGVtYWlsOiByZXN1bHQuZGF0YS5lbWFpbCwgcGhvbmU6IHJlc3VsdC5kYXRhLnBob25lLCByb2xlOiByZXN1bHQuZGF0YS5yb2xlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3VsdC5kYXRhLm1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0VXNlckJvb2tpbmdzID0gZnVuY3Rpb24gKCkgey8vVE9ETyBwb3ByYXdpxIcgcmF6ZW0geiBhcGkgxbxlYnkgZGF3YcWCbyBzdWNjZXNzXHJcbiAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvZ2V0VXNlckJvb2tpbmdzJykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgY2hhbmdlVXNlckRldGFpbHMgPSBmdW5jdGlvbiAobmV3RGV0YWlscykge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS90ZXN0JywgbmV3RGV0YWlscykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0LmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdoZWxsbycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL2dldE5ld1Rva2VuJywge2VtYWlsOiBuZXdEZXRhaWxzLmVtYWlsfSkudGhlbihmdW5jdGlvbiAocmVzdWx0Mikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0Mi5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXN1bHQyIHN1Y2Nlc3MnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yZVVzZXJJbmZvKHJlc3VsdDIuZGF0YS50b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFVzZXJJbmZvKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBub3dlZ28gdG9rZW5hJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe3N1Y2Nlc3M6IHRydWUsIG1zZzogXCJQb215xZtsbmllIHptaWVuaW9ubyBkYW5lXCJ9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh7c3VjY2VzczogZmFsc2UsIG1zZzogXCJjb8WbIHBvc3rFgm8gbmllIHRha1wifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbiAob2xkUGFzcywgbmV3UGFzcykge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9jaGFuZ2UtcGFzc3dvcmQnLCB7b2xkUGFzczogb2xkUGFzcywgbmV3UGFzczogbmV3UGFzc30pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC5kYXRhLnN1Y2Nlc3MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe21zZzogJ3BvbXnFm2xuaWUgem1pZW5pb25vIGhhc2xvJ30pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh7bXNnOiByZXN1bHQuZGF0YS5lcnJvcn0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0VXNlclJvbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9hcGkvdXNlcmluZm8nKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7cm9sZTogcmVzdWx0LmRhdGEucm9sZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXN1bHQuZGF0YS5tc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJue1xyXG4gICAgICAgICAgICBzaWduaW46IHNpZ25pbixcclxuICAgICAgICAgICAgc2lnbm91dDogc2lnbm91dCxcclxuICAgICAgICAgICAgc2lnbnVwOiBzaWdudXAsXHJcbiAgICAgICAgICAgIGdldFVzZXJJbmZvOiBnZXRVc2VySW5mbyxcclxuICAgICAgICAgICAgZ2V0VXNlckJvb2tpbmdzOiBnZXRVc2VyQm9va2luZ3MsXHJcbiAgICAgICAgICAgIGNoYW5nZVVzZXJEZXRhaWxzOiBjaGFuZ2VVc2VyRGV0YWlscyxcclxuICAgICAgICAgICAgY2hhbmdlUGFzc3dvcmQ6IGNoYW5nZVBhc3N3b3JkLFxyXG4gICAgICAgICAgICBnZXRVc2VyUm9sZTogZ2V0VXNlclJvbGUsXHJcbiAgICAgICAgICAgIGlzQXV0aGVudGljYXRlZDogaXNBdXRoZW50aWNhdGVkXHJcbiAgICAgICAgfVxyXG4gICAgfV0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFBpb3RyIFVzemxlciBvbiAwOC4xMS4yMDE2LlxyXG4gKi9cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuc2VydmljZSgnb2ZmZXJTdmMnLCBmdW5jdGlvbiAoJHEsICRodHRwKSB7XHJcbiAgICAgICAgdmFyIGNob3NlblJvb20gPSB7fTtcclxuICAgICAgICB2YXIgZXh0cmFzID0gW107XHJcblxyXG4gICAgICAgIHZhciBjaG9vc2VSb29tID0gZnVuY3Rpb24gKHJvb20pIHtcclxuICAgICAgICAgICAgY2hvb3NlblJvb20gPSByb29tO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRSb29tID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2hvb3NlblJvb207XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldEV4dHJhcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2FwaS9nZXRFeHRyYXMnKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YS5leHRyYXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXN1bHQuZGF0YS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgICAgIHJldHVybntcclxuICAgICAgICAgICAgY2hvb3NlUm9vbTogY2hvb3NlUm9vbSxcclxuICAgICAgICAgICAgZ2V0Um9vbTogZ2V0Um9vbSxcclxuICAgICAgICAgICAgZ2V0RXh0cmFzOiBnZXRFeHRyYXMsXHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFBpb3RyIFVzemxlciBvbiAwNi4xMS4yMDE2LlxyXG4gKi9cclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuc2VydmljZSgncm9vbVNlcnZpY2UnLCBmdW5jdGlvbiAoJHEsICRodHRwKSB7XHJcblxyXG4gICAgICAgIHZhciBzZWxlY3RlZFJvb20gPSBudWxsO1xyXG5cclxuICAgICAgICB2YXIgZ2V0Um9vbXMgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9maW5kUm9vbXMnLCBkYXRhKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuZGF0YS5zdWNjZXNzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvYnJhbm8gcG9rb2plJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEucm9vbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXN1bHQuZGF0YS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgYm9va1Jvb20gPSBmdW5jdGlvbiAoZGF0YSkgey8vVE9ETyB6amHEhcSHIHNpxJlcclxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvcmVzZXJ2ZScsIGRhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC5kYXRhLnN1Y2Nlc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhLnN1Y2Nlc3MpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3VsdC5kYXRhLmVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNhbmNlbEJvb2tpbmcgPSBmdW5jdGlvbiAocm9vbV9pZCwgYm9va2luZ19pZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2pldGVtIHByemVkIHBvc3QgY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL2NhbmNlbEJvb2tpbmcnLHtyb29tX2lkOiByb29tX2lkLCBib29raW5nX2lkOiBib29raW5nX2lkfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0LmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXNvbHZlIGNhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhLnN1Y2Nlc3MpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlamVjdCBjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3VsdC5kYXRhLmVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldEFsbFJvb21zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL2dldFJvb21zJykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0LmRhdGEuc3VjY2Vzcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEucmVzdWx0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXN1bHQuZGF0YS5lcnJvcilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRSb29tQm9va2luZ3MgPSBmdW5jdGlvbiAocm9vbV9pZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9nZXRSb29tQm9va2luZ3MnLCB7cm9vbV9pZDogcm9vbV9pZH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQuZGF0YVswXS5yZXNlcnZhdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhWzBdKVxyXG4gICAgICAgICAgICAgICAgfSxmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3VsdC5kYXRhKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZ2V0VXNlckluZm8gPSBmdW5jdGlvbiAodXNlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9nZXRVc2VySW5mbycsIHtlbWFpbDogdXNlcn0pLnRoZW4oZnVuY3Rpb24gKHVzZXJJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXVzZXJJbmZvLmRhdGEuZXJyb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodXNlckluZm8uZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QodXNlckluZm8uZGF0YSlcclxuICAgICAgICAgICAgICAgIH0sZnVuY3Rpb24gKHVzZXJJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHVzZXJJbmZvLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc2lnbnVwQW5kQm9vayA9IGZ1bmN0aW9uICh1c2VyLCBpZCwgZGF0ZXMsIHByaWNlLCBleHRyYXMpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXh0cmFzKTtcclxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvc2lnbnVwQW5kQm9vaycsIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6IHVzZXIuZmlyc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lOiB1c2VyLmxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxyXG4gICAgICAgICAgICAgICAgICAgIG51bWJlcjogdXNlci5waG9uZSxcclxuICAgICAgICAgICAgICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogZGF0ZXMuZGF0ZUZyb20sXHJcbiAgICAgICAgICAgICAgICAgICAgdG86IGRhdGVzLmRhdGVUbyxcclxuICAgICAgICAgICAgICAgICAgICBwcmljZTogcHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFzOiBleHRyYXNcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbmllIHVkYcWCbyBzacSZJylcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGFkbWluQm9vayA9IGZ1bmN0aW9uIChpZCwgZW1haWwsIGRhdGVzLCBwcmljZSwgZXh0cmFzKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2Vyd2lzOiByb29tU3ZjLCBmdW5rY2phOiBhZG1pbkJvb2sgfCBpZDpcIitpZCtcIiwgZW1haWw6IFwiK2VtYWlsKTtcclxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvYWRtaW5Cb29rJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogZGF0ZXMuZGF0ZUZyb20sXHJcbiAgICAgICAgICAgICAgICAgICAgdG86IGRhdGVzLmRhdGVUbyxcclxuICAgICAgICAgICAgICAgICAgICBwcmljZTogcHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFzOiBleHRyYXNcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC5kYXRhLnN1Y2Nlc3MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ09LJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdXeXN0xIVwacWCIGLFgsSFZCBwb2RjemFzIHJlemVyd2FjamknKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdXeXN0xIVwacWCIGLFgsSFZCBwb2RjemFzIHJlemVyd2FjamknKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdldFVzZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL2dldFVzZXJzJykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0LmRhdGEuc3VjY2VzcyA9IGZhbHNlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdOaWUgem5hbGV6aW9ubyB1xbx5dGtvd25pa8OzdycpXHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgnTmllIHpuYWxlemlvbm8gdcW8eXRrb3duaWvDs3cnKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcGF5ID0gZnVuY3Rpb24gKHJlc2VydmF0aW9uX2lkLCBwYXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9hcGkvcGFpZCcsIHtpZDogcmVzZXJ2YXRpb25faWQsIHBheTogcGF5fSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0LmRhdGEuc3VjY2VzcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJue1xyXG4gICAgICAgICAgICBnZXRSb29tczogZ2V0Um9vbXMsXHJcbiAgICAgICAgICAgIGdldEFsbFJvb21zOiBnZXRBbGxSb29tcyxcclxuICAgICAgICAgICAgYm9va1Jvb206IGJvb2tSb29tLFxyXG4gICAgICAgICAgICBjYW5jZWxCb29raW5nOiBjYW5jZWxCb29raW5nLFxyXG4gICAgICAgICAgICBnZXRSb29tQm9va2luZ3M6IGdldFJvb21Cb29raW5ncyxcclxuICAgICAgICAgICAgZ2V0VXNlckluZm86IGdldFVzZXJJbmZvLFxyXG4gICAgICAgICAgICBzaWdudXBBbmRCb29rOiBzaWdudXBBbmRCb29rLFxyXG4gICAgICAgICAgICBhZG1pbkJvb2s6IGFkbWluQm9vayxcclxuICAgICAgICAgICAgZ2V0VXNlcnM6IGdldFVzZXJzLFxyXG4gICAgICAgICAgICBwYXk6IHBheVxyXG4gICAgICAgIH1cclxuICAgIH0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
