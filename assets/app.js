var app=angular.module("app",["ngRoute","ui.router","ngCookies"]);angular.module("app").factory("authInterceptor",["$window",function(e){return{request:function(o){return o.headers=o.headers||{},e.localStorage.token&&(o.headers.Authorization=e.localStorage.token),o}}}]).config(["$stateProvider","$urlRouterProvider",function(e,o){e.state("home",{url:"/main",controller:"roomCtrl",templateUrl:"main"}).state("rooms",{url:"/rooms",templateUrl:"rooms"}).state("restaurant",{url:"/restaurant",templateUrl:"restaurant"}).state("contact",{url:"/contact",templateUrl:"contact"}).state("offer",{url:"/offer",controller:"offerCtrl",templateUrl:"offer"}).state("confirmation",{url:"/confirmation",templateUrl:"confirmation"}).state("successfulBooking",{url:"/successfulBooking",templateUrl:"successfulBooking"}).state("successfulSignup",{url:"/successfulSignup",templateUrl:"successfulSignup"}).state("account",{url:"/account",templateUrl:"account"}).state("signin",{url:"/signin",templateUrl:"signin"}).state("signup",{url:"/signup",templateUrl:"signup"}).state("account.bookings",{url:"/bookings",templateUrl:"bookings"}).state("account.details",{url:"/details",templateUrl:"details"}).state("account.changePassword",{url:"/changePassword",templateUrl:"changePassword"}).state("managment",{url:"/managment",templateUrl:"managment"}).state("managment.rooms",{url:"/managment-rooms",templateUrl:"managment-rooms"}).state("managment.users",{url:"/managment-users",templateUrl:"managment-users"}).state("managment.vouchers",{url:"/managment-vouchers",templateUrl:"managment-vouchers"}).state("managment-bookings",{url:"/managment-bookings",templateUrl:"/managment-bookings"}).state("test",{url:"/test",templateUrl:"test"}),o.otherwise("/main")}]).run(["$rootScope","$state","$stateParams",function(e,o,t){e.$state=o,e.$stateParams=t}]),angular.module("app").controller("accCtrl",["$scope","$state","AuthService","roomService",function(e,o,t,n){e.regex="(\\+[0-9]\\d{1})*(\\s)*([0-9]\\d{2})(\\s*)([0-9]\\d{2})(\\s*)([0-9]\\d{2})",e.isActive=function(e){return e===$location.path()},e.changeUserDetails=function(e,n,a,r,s){if(e){var i={firstName:n,lastName:a,email:r,phoneNumber:s};t.changeUserDetails(i).then(function(e){o.reload()})}},e.cancelBooking=function(e,t){console.log("room id to:"+e+", booking_id to:"+t),n.cancelBooking(e,t).then(function(e){console.log("udało się anulować"),o.reload()})};var a=function(){t.getUserBookings().then(function(o){console.log(o),e.userBookings=o})},r=function(){t.getUserInfo().then(function(o){console.log(o),e.firstName=o.firstName,e.lastName=o.lastName,e.email=o.email,e.phone=o.phone})};e.changePassword=function(o,n,a){o&&t.changePassword(n,a).then(function(o){console.log(o.msg),e.successfulPasswordChange=!0},function(o){e.wrongPassword=!0})},e.checkDate=function(e){var o=new Date,t=new Date(e);return t>o},r(),a()}]),angular.module("app").controller("authCtrl",["$q","$scope","$state","$window","$location","$route","$rootScope","AuthService",function(e,o,t,n,a,r,s,i){o.regex="(\\+[0-9]\\d{1})*(\\s)*([0-9]\\d{2})(\\s*)([0-9]\\d{2})(\\s*)([0-9]\\d{2})",o.submitError=!1,o.errorMessage="",s.isLoggedIn=function(){return i.isAuthenticated},s.isLoggedIn()&&i.getUserRole().then(function(e){s.role=e.role}),o.signin=function(){console.log("login"),i.signin(o.user).then(function(e,o){s.isLogedIn=!0,i.getUserRole().then(function(e){s.role=e.role}),n.location.reload(),console.log(e)})},o.signout=function(){i.signout(),s.isLogedIn=!1,t.go("home").then(function(){n.location.reload()}),console.log("logout")},o.getUserInfo=function(){i.getUserInfo().then(function(e){console.log(e),o.userinfo=e})},o.submitForm=function(e){e?i.signup(o.user).then(function(e){console.log("Pomyślnie zarejestrowano"),o.submitError=!1,i.signin(o.user).then(function(e,o){s.isLogedIn=!0,"http://localhost:3001/#/confirmation"==n.location.toString()?n.location.reload():t.go("successfulSignup").then(function(){n.location.reload()})})},function(e){switch(console.log(e),e.code){case 11e3:o.submitError=!0,o.errorMessage="Wybrany email jest już zarejestrowany. Proszę wybrać inny.";break;default:o.submitError=!0,o.errorMessage="Upss coś poszło nie tak. Proszę spróbować później."}}):(o.submitError=!0,o.errorMessage="Upss coś poszło nie tak. Proszę spróbować później.")},o.$watch("submitError",function(e){console.log(e)})}]),angular.module("app").controller("confirmationCtrl",["$q","$window","$location","$state","$cookies","$scope","$rootScope","AuthService","roomService",function(e,o,t,n,a,r,s,i,c){r.isSignedIn=!1,r.room=JSON.parse(a.get("room")),r.dateFrom=JSON.parse(a.get("dates")).dateFrom,r.dateTo=JSON.parse(a.get("dates")).dateTo,r.extras=JSON.parse(a.get("extras")).extras,r.numOfDays=JSON.parse(a.get("extras")).numOfDays;var u=function(){i.isAuthenticated?r.isSignedIn=!0:r.isSignedIn=!1};r.reserve=function(){1!=r.terms?alert("Przed potwierdzeniem rezerwacji należy zaakceptowaćregulamin."):c.bookRoom({id:r.room._id,from:r.dateFrom,to:r.dateTo,price:l(),extras:r.extras}).then(function(){n.go("successfulBooking")},function(e){})},r.toPrevious=function(){n.go("offer")};var l=function(){var e=0;return e=r.room.price*r.numOfDays,r.extras.forEach(function(o){e+=o.price*r.numOfDays}),e};u()}]),angular.module("app").directive("compareTo",function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,o,t,n){n.$validators.compareTo=function(o){return o==e.otherModelValue},e.$watch("otherModelValue",function(){n.$validate()})}}}).directive("userInfo",function(){return{template:"<p>sialala</p>"}}).directive("vouchercheck",["voucherService",function(e){return{require:"ngModel",link:function(e,o,t,n){function a(e){return 23==e.length&&"-"==e.charAt(5)&&e.charAt(11)&&e.charAt(17)?n.$setValidity("validVoucher",!0):n.$setValidity("validVoucher",!1),e}n.$parsers.push(a)}}}]),angular.module("app").controller("offerCtrl",["$scope","$cookies","$state","$location","$window","offerSvc",function(e,o,t,n,a,r){e.offer={},e.extras=[],e.selectedExtras=[];var s={};e.dateFrom="",e.dateTo="",e.roomName="";var i=function(){e.offer=JSON.parse(o.get("room")),e.extras=u(),s=JSON.parse(o.get("dates")),e.dateFrom=c(new Date(s.dateFrom)),e.dateTo=c(new Date(s.dateTo)),e.roomName=e.offer.type,e.roomPrice=e.offer.price*l(),e.extrasTotalPrice=0},c=function(e){var o=e.getUTCDate(),t=e.getUTCMonth()+1,n=e.getUTCFullYear();return""+o+"-"+t+"-"+n};e.addOrRemoveExtra=function(o){var t=e.selectedExtras.indexOf(o);o.buttonText=o.buttonToggle?"Dodaj +":"Usuń -",o.buttonToggle=!o.buttonToggle,t==-1?(e.selectedExtras.push(o),e.extrasTotalPrice+=o.price*l()):(e.selectedExtras.splice(t,1),e.extrasTotalPrice-=o.price*l())},e.toConfirmation=function(){console.log("asdasd");var n={extras:e.selectedExtras,numOfDays:l()};o.put("extras",JSON.stringify(n)),t.go("confirmation")},e.toPrevious=function(){t.go("home")};var u=function(){r.getExtras().then(function(o){e.extras=o;for(var t=0;t<e.extras.length;t++)e.extras[t].buttonText="Dodaj +",e.extras[t].buttonToggle=!1})},l=function(){var e=864e5,o=new Date(s.dateFrom),t=new Date(s.dateTo),n=Date.UTC(o.getFullYear(),o.getMonth(),o.getDate()),a=Date.UTC(t.getFullYear(),t.getMonth(),t.getDate());return Math.floor((a-n)/e)};i()}]),angular.module("app").controller("roomCtrl",["$q","$cookies","$scope","$rootScope","$window","$location","roomService","offerSvc","$filter","$state",function(e,o,t,n,a,r,s,i,c,u){t.dateFrom="",t.dateTo="",t.noRoomsError=!1,t.errorMsg="",t.rooms=[],t.numberOfBeds=1,t.successfulCancel=!1,t.totalPrice=0,t.extras=[],t.selectedExtras=[],t.extrasTotalPrice=0,t.selectOrAddUser=void 0,t.select=function(e){t.selectedRoom=e};var l=function(){var e=new Date;console.log(e),t.dateFrom=e;var o=new Date;o.setDate(o.getDate()+1),t.dateTo=o};t.init=function(){l(),t.findRooms()},t.findRooms=function(){if(t.dateTo.getMonth()<=t.dateFrom.getMonth()&&t.dateTo.getDate()<=t.dateFrom.getDate()){var e=t.dateFrom;e.setDate(e.getDate()+1),t.dateTo=e}s.getRooms({from:t.dateFrom.toISOString(),to:t.dateTo.toISOString(),beds:t.numberOfBeds}).then(function(e){e.length>0?(t.rooms=e,t.noRoomsError=!1):t.noRoomsError=!0},function(e){t.noRoomsError=!0,t.errorMsg="Coś poszło nie tak."})},t.addRoom=function(e){o.put("room",JSON.stringify(e)),o.put("dates",JSON.stringify({dateFrom:t.dateFrom,dateTo:t.dateTo})),i.chooseRoom(e),u.go("offer")},t.test=function(){console.log(t.rooms),t.findRooms()},t.getAllRooms=function(){s.getAllRooms().then(function(e){t.allRooms=e,console.log(e)},function(e){})},t.getAvailability=function(e){for(var o=(new Date,new Date(t.roomDateFrom)),n=new Date(t.roomDateTo),a=0;a<e.length;a++){var r=new Date(e[a].from),s=new Date(e[a].to);if(o<s&&n>r)return"notAvailable"}return"available"},t.managmentInit=function(){var e=new Date;t.roomDateFrom=e;var o=new Date;o.setDate(o.getDate()+1),t.roomDateTo=o,t.getAllRooms()},t.toBookings=function(e){o.put("selectedRoom",JSON.stringify(e)),$("#regulamin").modal("hide"),setTimeout(function(){u.go("managment-bookings")},500)},t.getSelectedRoom=function(){t.selectedRoom=JSON.parse(o.get("selectedRoom"))},t.checkDate=function(e){var o=new Date,t=new Date(e);return t>o},t.cancelBooking=function(e,o){console.log("room id to:"+e+", booking_id to:"+o),s.cancelBooking(e,o).then(function(e){console.log("udało się anulować"),u.reload()})},t.getRoomBookings=function(){t.getSelectedRoom(),s.getRoomBookings(t.selectedRoom._id).then(function(e){t.bookings=e.reservations})},t.selectUser=function(e){s.getUserInfo(e).then(function(e){t.selectedUser=e,console.log(t.selectedUser)})},t.toBooking=function(e,t,n){o.put("booking",JSON.stringify({room:e,dateFrom:t,dateTo:n})),$("#regulamin").modal("hide"),setTimeout(function(){u.go("test")},500)},t.initBooking=function(){t.booking=JSON.parse(o.get("booking")),t.test.dateFrom=new Date(t.booking.dateFrom),t.test.dateTo=new Date(t.booking.dateTo),t.calculateTotalPrice(),g(),s.getUsers().then(function(e){t.users=JSON.parse(JSON.stringify(e))})},t.submitBookForm=function(){var e=null;if(t.selectOrAddUser){if(void 0==t.test.email)var e={email:""+t.test.firstName+t.test.lastName+t.test.phone,firstName:t.test.firstName,lastName:t.test.lastName,phone:t.test.phone};else var e={email:t.test.email,firstName:t.test.firstName,lastName:t.test.lastName,phone:t.test.phone};s.signupAndBook(e,t.booking.room._id,{dateFrom:t.test.dateFrom,dateTo:t.test.dateTo},t.totalPrice,t.selectedExtras).then(function(e){console.log(e)})}else e=JSON.parse(t.selectedUserBooking),console.log("RoomCtrl, funkcja submitBookForm, dataOd: "+t.test.dateFrom),s.adminBook(t.booking.room._id,e.email,{dateFrom:t.test.dateFrom,dateTo:t.test.dateTo},t.totalPrice,t.selectedExtras).then(function(e){console.log(e)})};var d=function(){var e=864e5,o=new Date(t.test.dateFrom),n=new Date(t.test.dateTo),a=Date.UTC(o.getFullYear(),o.getMonth(),o.getDate()),r=Date.UTC(n.getFullYear(),n.getMonth(),n.getDate());return Math.floor((r-a)/e)};t.calculateTotalPrice=function(){void 0!=n.discount&&"zl"==n.discount.type?t.totalPrice=d()*t.booking.room.price+t.extrasTotalPrice-n.discount.amount:void 0!=n.discount&&"%"==n.discount.type?(t.totalPrice=d()*t.booking.room.price+t.extrasTotalPrice,t.totalPrice=t.totalPrice-t.totalPrice*(n.discount.amount/100)):t.totalPrice=d()*t.booking.room.price+t.extrasTotalPrice};var g=function(){i.getExtras().then(function(e){t.extras=e;for(var o=0;o<t.extras.length;o++)t.extras[o].buttonText="Dodaj +",t.extras[o].buttonToggle=!1})};t.addOrRemoveExtra=function(e){var o=t.selectedExtras.indexOf(e);e.buttonText=e.buttonToggle?"Dodaj +":"Usuń -",e.buttonToggle=!e.buttonToggle,t.totalPrice=0,o==-1?(t.selectedExtras.push(e),t.extrasTotalPrice+=e.price*d()):(t.selectedExtras.splice(o,1),t.extrasTotalPrice-=e.price*d()),t.calculateTotalPrice()},t.paidClass=function(e){return e?"btn-success":"btn-warning"},t.pay=function(e){s.pay(e._id,!e.paid).then(function(o){console.log(o),e.paid=!e.paid})},n.$watch("discount",function(){t.calculateTotalPrice()})}]),angular.module("app").controller("voucherCtrl",["$scope","$rootScope","voucherService",function(e,o,t){function n(e){return!isNaN(parseFloat(e))&&isFinite(e)}function a(e){for(var o="",t=0;t<e.length;t++){if(!n(e.charAt(t)))return o=Number(o);o+=e.charAt(t)}return o=Number(o)}e.generateVouchers=function(){e.vouchers={codes:[]};var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",t=e.voucherExpiryDate;if(t<new Date)e.voucherError="Data wygaśnięcia nie może być z przeszłości",e.vouchersGenerated=!1,e.generatedVouchers={};else{for(e.voucherError=void 0;e.vouchers.codes.length<e.numberOfVouchers;){for(var n="",r=0;r<4;r++){for(var s=0;s<5;s++)n+=o.charAt(Math.floor(Math.random()*o.length));3!=r&&(n+="-")}e.vouchers.codes.push(n)}var i=e.discount.charAt(e.discount.length-1);"%"===i?e.vouchers.discountType="%":"ł"===i&&"z"===e.discount.charAt(e.discount.length-2)&&(e.vouchers.discountType="zl"),e.vouchers.discount=a(e.discount),e.vouchers.type=e.voucherType,e.vouchers.expiryDate=t,e.generatedVouchers=e.vouchers.codes,e.vouchersGenerated=!0,e.vouchersSaved=!1}},e.saveVouchers=function(){console.log(e.vouchers),t.saveVouchers(e.vouchers).then(function(e){}),e.vouchersSaved=!0},e.checkVoucher=function(){console.log(e.voucher),t.checkVoucher(e.voucher.toString()).then(function(t){console.log(t),e.voucherNotFound=void 0,e.voucherFound="Kod poprawny zniżka "+t.discount+t.discountType,o.discount={amount:t.discount,type:t.discountType},console.log(t.discount)},function(t){console.log(t),o.discount=void 0,e.voucherNotFound=t,e.voucherFound=void 0})},e.codeChanged=function(){e.bookingFrm.$valid||(e.voucherFound=void 0,e.voucherNotFound=void 0,o.discount=void 0)}}]),angular.module("app").filter("uniqueCategories",function(){return function(e,o){if(angular.isArray(e)){for(var t=[],n={},a=0;a<e.length;a++){var r=e[a][o];angular.isUndefined(n[r])&&(n[r]=!0,t.push(e[a]))}return t}return e}}),angular.module("app").service("AuthService",["$http","$q",function(e,o,t){function n(){var e=window.localStorage.getItem(c);console.log("loading User info..."),e&&s(e)}function a(){i=void 0,u=!1,e.defaults.headers.common.Authorization=void 0,window.localStorage.removeItem(c)}function r(e){window.localStorage.setItem(c,e),s(e)}function s(o){u=!0,i=o,e.defaults.headers.common.Authorization=i}var i,c="token",u=!1,l=function(t){return o(function(o,n){e.post("/api/authenticate",t).then(function(e){e.data.success?(r(e.data.token),o(e.data.msg,e.data.success)):n(e.data.msg,e.data.success)})})},d=function(){a()},g=function(t){return o(function(o,n){e.post("/api/signup",t).then(function(e){e.data.success?(console.log("jestem w resolve"),o(e.data.msg)):n(e.data.msg)})})};n();var m=function(){return o(function(o,t){e.get("/api/userinfo").then(function(e){e.data.success?o({firstName:e.data.firstName,lastName:e.data.lastName,email:e.data.email,phone:e.data.phone,role:e.data.role}):t(e.data.msg)})})},f=function(){return o(function(o,t){e.get("/api/getUserBookings").then(function(e){o(e.data)})})},p=function(t){return o(function(o,a){e.post("/api/test",t).then(function(s){s.data.success?(console.log("hello"),e.post("/api/getNewToken",{email:t.email}).then(function(e){e.data.success?(console.log("result2 success"),r(e.data.token),n()):console.log("error nowego tokena")}),o({success:!0,msg:"Pomyślnie zmieniono dane"})):a({success:!1,msg:"coś poszło nie tak"})})})},h=function(t,n){return o(function(o,a){e.post("/api/change-password",{oldPass:t,newPass:n}).then(function(e){e.data.success?o({msg:"pomyślnie zmieniono haslo"}):a({msg:e.data.error})})})},v=function(){return o(function(o,t){e.get("/api/userinfo").then(function(e){e.data.success?o({role:e.data.role}):t(e.data.msg)})})};return{signin:l,signout:d,signup:g,getUserInfo:m,getUserBookings:f,changeUserDetails:p,changePassword:h,getUserRole:v,isAuthenticated:u}}]),angular.module("app").service("offerSvc",["$q","$http",function(e,o){var t=function(e){choosenRoom=e},n=function(){return choosenRoom},a=function(){return e(function(e,t){o.get("/api/getExtras").then(function(o){o.data.success?e(o.data.extras):t(o.data.error)})})};return{chooseRoom:t,getRoom:n,getExtras:a}}]),angular.module("app").service("roomService",["$q","$http",function(e,o){var t=function(t){return e(function(e,n){o.post("/api/findRooms",t).then(function(o){o.data.success?(console.log("Pobrano pokoje"),e(o.data.rooms)):n(o.data.error)})})},n=function(t){return e(function(e,n){o.post("/api/reserve",t).then(function(o){o.data.success?e(o.data.success):n(o.data.error)})})},a=function(t,n){return e(function(e,a){console.log("jetem przed post cancel"),o.post("/api/cancelBooking",{room_id:t,booking_id:n}).then(function(o){o.data.success?(console.log("resolve cancel"),e(o.data.success)):(console.log("reject cancel"),a(o.data.error))})})},r=function(){return e(function(e,t){o.get("/api/getRooms").then(function(o){o.data.success?e(o.data.result):t(o.data.error)})})},s=function(t){return e(function(e,n){o.post("/api/getRoomBookings",{room_id:t}).then(function(o){console.log(o.data[0].reservations),e(o.data[0])},function(e){n(e.data)})})},i=function(t){return e(function(e,n){o.post("/api/getUserInfo",{email:t}).then(function(o){o.data.error?n(o.data):e(o.data)},function(e){n(e.data)})})},c=function(t,n,a,r,s){return console.log(s),e(function(e,i){o.post("/api/signupAndBook",{firstName:t.firstName,lastName:t.lastName,email:t.email,number:t.phone,id:n,from:a.dateFrom,to:a.dateTo,price:r,extras:s}).then(function(e){console.log(e)},function(e){console.log("nie udało się")})})},u=function(t,n,a,r,s){return console.log("Serwis: roomSvc, funkcja: adminBook | id:"+t+", email: "+n),e(function(e,i){o.post("/api/adminBook",{id:t,email:n,from:a.dateFrom,to:a.dateTo,price:r,extras:s}).then(function(o){o.data.success?e("OK"):i("Wystąpił błąd podczas rezerwacji")},function(e){i("Wystąpił błąd podczas rezerwacji")})})},l=function(){return e(function(e,t){o.get("/api/getUsers").then(function(o){(o.data.success=!1)?t("Nie znaleziono użytkowników"):e(o.data)},function(e){t("Nie znaleziono użytkowników")})})},d=function(t,n){return e(function(e,a){o.post("/api/paid",{id:t,pay:n}).then(function(o){o.data.success?e(!0):a(!1)})})};return{getRooms:t,getAllRooms:r,bookRoom:n,cancelBooking:a,getRoomBookings:s,getUserInfo:i,signupAndBook:c,adminBook:u,getUsers:l,pay:d}}]),angular.module("app").service("voucherService",["$q","$http",function(e,o){var t=function(t){return console.log(t),e(function(e,n){o.post("/api/saveVouchers",t).then(function(o){o.data.success?e(o.data.msg):n(o.data.msg)},function(e){n(e.data.msg)})})},n=function(t){return e(function(e,n){o.post("/api/checkVoucher",{voucherCode:t}).then(function(o){o.data.success?e(o.data.voucher):n(o.data.error)})})};return{saveVouchers:t,checkVoucher:n}}]);
//# sourceMappingURL=data:application/json;base64,
